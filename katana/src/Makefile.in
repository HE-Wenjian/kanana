# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = katana$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 = katana-patchwrite.$(OBJEXT) katana-codediff.$(OBJEXT) \
	katana-typediff.$(OBJEXT) katana-elfwriter.$(OBJEXT) \
	katana-sourcetree.$(OBJEXT) katana-write_to_dwarf.$(OBJEXT) \
	katana-elfcmp.$(OBJEXT)
am__objects_2 = katana-hotpatch.$(OBJEXT) katana-target.$(OBJEXT) \
	katana-patchapply.$(OBJEXT) katana-versioning.$(OBJEXT) \
	katana-linkmap.$(OBJEXT) katana-safety.$(OBJEXT) \
	katana-pmap.$(OBJEXT)
am__objects_3 = katana-dictionary.$(OBJEXT) katana-hash.$(OBJEXT) \
	katana-util.$(OBJEXT) katana-map.$(OBJEXT) \
	katana-list.$(OBJEXT) katana-logging.$(OBJEXT) \
	katana-path.$(OBJEXT) katana-refcounted.$(OBJEXT)
am__objects_4 = katana-fdedump.$(OBJEXT) katana-dwinfo_dump.$(OBJEXT) \
	katana-unsafe_funcs_dump.$(OBJEXT)
am_katana_OBJECTS = katana-katana.$(OBJEXT) \
	katana-dwarftypes.$(OBJEXT) katana-elfparse.$(OBJEXT) \
	katana-types.$(OBJEXT) katana-dwarf_instr.$(OBJEXT) \
	katana-register.$(OBJEXT) katana-relocation.$(OBJEXT) \
	katana-symbol.$(OBJEXT) katana-fderead.$(OBJEXT) \
	katana-dwarfvm.$(OBJEXT) katana-config.$(OBJEXT) \
	$(am__objects_1) $(am__objects_2) $(am__objects_3) \
	$(am__objects_4)
katana_OBJECTS = $(am_katana_OBJECTS)
katana_LDADD = $(LDADD)
katana_LINK = $(CCLD) $(katana_CFLAGS) $(CFLAGS) $(katana_LDFLAGS) \
	$(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(katana_SOURCES)
DIST_SOURCES = $(katana_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EXEEXT = @EXEEXT@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OBJC = @OBJC@
OBJCDEPMODE = @OBJCDEPMODE@
OBJCFLAGS = @OBJCFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_OBJC = @ac_ct_OBJC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
katana_CFLAGS = -I ../include -std=c99 -D_POSIX_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE -D_GNU_SOURCE  -I /usr/include/libdwarf -Doff64_t=__off64_t
katana_LDFLAGS = -ldwarf -lelf -lm -lunwind-generic -lunwind-ptrace
PATCHER_SRC = patcher/hotpatch.c patcher/target.c patcher/patchapply.c patcher/versioning.c patcher/linkmap.c patcher/safety.c patcher/pmap.c
PATCHWRITE_SRC = patchwrite/patchwrite.c patchwrite/codediff.c patchwrite/typediff.c patchwrite/elfwriter.c patchwrite/sourcetree.c patchwrite/write_to_dwarf.c patchwrite/elfcmp.c
UTIL_SRC = util/dictionary.c util/hash.c util/util.c util/map.c util/list.c util/logging.c util/path.c util/refcounted.c
INFO_SRC = info/fdedump.c info/dwinfo_dump.c  info/unsafe_funcs_dump.c
katana_SOURCES = katana.c dwarftypes.c   elfparse.c  types.c  dwarf_instr.c register.c relocation.c symbol.c fderead.c dwarfvm.c config.c $(PATCHWRITE_SRC) $(PATCHER_SRC) $(UTIL_SRC) $(INFO_SRC)
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
katana$(EXEEXT): $(katana_OBJECTS) $(katana_DEPENDENCIES) 
	@rm -f katana$(EXEEXT)
	$(katana_LINK) $(katana_OBJECTS) $(katana_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-codediff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-config.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dictionary.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarf_instr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarftypes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarfvm.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwinfo_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfcmp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfparse.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfwriter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-fdedump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-fderead.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-hash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-hotpatch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-katana.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-linkmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-list.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-logging.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-map.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-patchapply.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-patchwrite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-path.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-pmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-refcounted.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-register.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-relocation.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-safety.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-sourcetree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-symbol.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-target.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-typediff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-types.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-unsafe_funcs_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-versioning.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-write_to_dwarf.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

katana-katana.o: katana.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-katana.o -MD -MP -MF $(DEPDIR)/katana-katana.Tpo -c -o katana-katana.o `test -f 'katana.c' || echo '$(srcdir)/'`katana.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-katana.Tpo $(DEPDIR)/katana-katana.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='katana.c' object='katana-katana.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-katana.o `test -f 'katana.c' || echo '$(srcdir)/'`katana.c

katana-katana.obj: katana.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-katana.obj -MD -MP -MF $(DEPDIR)/katana-katana.Tpo -c -o katana-katana.obj `if test -f 'katana.c'; then $(CYGPATH_W) 'katana.c'; else $(CYGPATH_W) '$(srcdir)/katana.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-katana.Tpo $(DEPDIR)/katana-katana.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='katana.c' object='katana-katana.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-katana.obj `if test -f 'katana.c'; then $(CYGPATH_W) 'katana.c'; else $(CYGPATH_W) '$(srcdir)/katana.c'; fi`

katana-dwarftypes.o: dwarftypes.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarftypes.o -MD -MP -MF $(DEPDIR)/katana-dwarftypes.Tpo -c -o katana-dwarftypes.o `test -f 'dwarftypes.c' || echo '$(srcdir)/'`dwarftypes.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarftypes.Tpo $(DEPDIR)/katana-dwarftypes.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarftypes.c' object='katana-dwarftypes.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarftypes.o `test -f 'dwarftypes.c' || echo '$(srcdir)/'`dwarftypes.c

katana-dwarftypes.obj: dwarftypes.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarftypes.obj -MD -MP -MF $(DEPDIR)/katana-dwarftypes.Tpo -c -o katana-dwarftypes.obj `if test -f 'dwarftypes.c'; then $(CYGPATH_W) 'dwarftypes.c'; else $(CYGPATH_W) '$(srcdir)/dwarftypes.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarftypes.Tpo $(DEPDIR)/katana-dwarftypes.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarftypes.c' object='katana-dwarftypes.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarftypes.obj `if test -f 'dwarftypes.c'; then $(CYGPATH_W) 'dwarftypes.c'; else $(CYGPATH_W) '$(srcdir)/dwarftypes.c'; fi`

katana-elfparse.o: elfparse.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfparse.o -MD -MP -MF $(DEPDIR)/katana-elfparse.Tpo -c -o katana-elfparse.o `test -f 'elfparse.c' || echo '$(srcdir)/'`elfparse.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfparse.Tpo $(DEPDIR)/katana-elfparse.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfparse.c' object='katana-elfparse.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfparse.o `test -f 'elfparse.c' || echo '$(srcdir)/'`elfparse.c

katana-elfparse.obj: elfparse.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfparse.obj -MD -MP -MF $(DEPDIR)/katana-elfparse.Tpo -c -o katana-elfparse.obj `if test -f 'elfparse.c'; then $(CYGPATH_W) 'elfparse.c'; else $(CYGPATH_W) '$(srcdir)/elfparse.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfparse.Tpo $(DEPDIR)/katana-elfparse.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfparse.c' object='katana-elfparse.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfparse.obj `if test -f 'elfparse.c'; then $(CYGPATH_W) 'elfparse.c'; else $(CYGPATH_W) '$(srcdir)/elfparse.c'; fi`

katana-types.o: types.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-types.o -MD -MP -MF $(DEPDIR)/katana-types.Tpo -c -o katana-types.o `test -f 'types.c' || echo '$(srcdir)/'`types.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-types.Tpo $(DEPDIR)/katana-types.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='types.c' object='katana-types.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-types.o `test -f 'types.c' || echo '$(srcdir)/'`types.c

katana-types.obj: types.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-types.obj -MD -MP -MF $(DEPDIR)/katana-types.Tpo -c -o katana-types.obj `if test -f 'types.c'; then $(CYGPATH_W) 'types.c'; else $(CYGPATH_W) '$(srcdir)/types.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-types.Tpo $(DEPDIR)/katana-types.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='types.c' object='katana-types.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-types.obj `if test -f 'types.c'; then $(CYGPATH_W) 'types.c'; else $(CYGPATH_W) '$(srcdir)/types.c'; fi`

katana-dwarf_instr.o: dwarf_instr.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarf_instr.o -MD -MP -MF $(DEPDIR)/katana-dwarf_instr.Tpo -c -o katana-dwarf_instr.o `test -f 'dwarf_instr.c' || echo '$(srcdir)/'`dwarf_instr.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarf_instr.Tpo $(DEPDIR)/katana-dwarf_instr.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarf_instr.c' object='katana-dwarf_instr.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarf_instr.o `test -f 'dwarf_instr.c' || echo '$(srcdir)/'`dwarf_instr.c

katana-dwarf_instr.obj: dwarf_instr.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarf_instr.obj -MD -MP -MF $(DEPDIR)/katana-dwarf_instr.Tpo -c -o katana-dwarf_instr.obj `if test -f 'dwarf_instr.c'; then $(CYGPATH_W) 'dwarf_instr.c'; else $(CYGPATH_W) '$(srcdir)/dwarf_instr.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarf_instr.Tpo $(DEPDIR)/katana-dwarf_instr.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarf_instr.c' object='katana-dwarf_instr.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarf_instr.obj `if test -f 'dwarf_instr.c'; then $(CYGPATH_W) 'dwarf_instr.c'; else $(CYGPATH_W) '$(srcdir)/dwarf_instr.c'; fi`

katana-register.o: register.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-register.o -MD -MP -MF $(DEPDIR)/katana-register.Tpo -c -o katana-register.o `test -f 'register.c' || echo '$(srcdir)/'`register.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-register.Tpo $(DEPDIR)/katana-register.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='register.c' object='katana-register.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-register.o `test -f 'register.c' || echo '$(srcdir)/'`register.c

katana-register.obj: register.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-register.obj -MD -MP -MF $(DEPDIR)/katana-register.Tpo -c -o katana-register.obj `if test -f 'register.c'; then $(CYGPATH_W) 'register.c'; else $(CYGPATH_W) '$(srcdir)/register.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-register.Tpo $(DEPDIR)/katana-register.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='register.c' object='katana-register.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-register.obj `if test -f 'register.c'; then $(CYGPATH_W) 'register.c'; else $(CYGPATH_W) '$(srcdir)/register.c'; fi`

katana-relocation.o: relocation.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-relocation.o -MD -MP -MF $(DEPDIR)/katana-relocation.Tpo -c -o katana-relocation.o `test -f 'relocation.c' || echo '$(srcdir)/'`relocation.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-relocation.Tpo $(DEPDIR)/katana-relocation.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='relocation.c' object='katana-relocation.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-relocation.o `test -f 'relocation.c' || echo '$(srcdir)/'`relocation.c

katana-relocation.obj: relocation.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-relocation.obj -MD -MP -MF $(DEPDIR)/katana-relocation.Tpo -c -o katana-relocation.obj `if test -f 'relocation.c'; then $(CYGPATH_W) 'relocation.c'; else $(CYGPATH_W) '$(srcdir)/relocation.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-relocation.Tpo $(DEPDIR)/katana-relocation.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='relocation.c' object='katana-relocation.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-relocation.obj `if test -f 'relocation.c'; then $(CYGPATH_W) 'relocation.c'; else $(CYGPATH_W) '$(srcdir)/relocation.c'; fi`

katana-symbol.o: symbol.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-symbol.o -MD -MP -MF $(DEPDIR)/katana-symbol.Tpo -c -o katana-symbol.o `test -f 'symbol.c' || echo '$(srcdir)/'`symbol.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-symbol.Tpo $(DEPDIR)/katana-symbol.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='symbol.c' object='katana-symbol.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-symbol.o `test -f 'symbol.c' || echo '$(srcdir)/'`symbol.c

katana-symbol.obj: symbol.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-symbol.obj -MD -MP -MF $(DEPDIR)/katana-symbol.Tpo -c -o katana-symbol.obj `if test -f 'symbol.c'; then $(CYGPATH_W) 'symbol.c'; else $(CYGPATH_W) '$(srcdir)/symbol.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-symbol.Tpo $(DEPDIR)/katana-symbol.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='symbol.c' object='katana-symbol.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-symbol.obj `if test -f 'symbol.c'; then $(CYGPATH_W) 'symbol.c'; else $(CYGPATH_W) '$(srcdir)/symbol.c'; fi`

katana-fderead.o: fderead.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fderead.o -MD -MP -MF $(DEPDIR)/katana-fderead.Tpo -c -o katana-fderead.o `test -f 'fderead.c' || echo '$(srcdir)/'`fderead.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fderead.Tpo $(DEPDIR)/katana-fderead.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='fderead.c' object='katana-fderead.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fderead.o `test -f 'fderead.c' || echo '$(srcdir)/'`fderead.c

katana-fderead.obj: fderead.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fderead.obj -MD -MP -MF $(DEPDIR)/katana-fderead.Tpo -c -o katana-fderead.obj `if test -f 'fderead.c'; then $(CYGPATH_W) 'fderead.c'; else $(CYGPATH_W) '$(srcdir)/fderead.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fderead.Tpo $(DEPDIR)/katana-fderead.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='fderead.c' object='katana-fderead.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fderead.obj `if test -f 'fderead.c'; then $(CYGPATH_W) 'fderead.c'; else $(CYGPATH_W) '$(srcdir)/fderead.c'; fi`

katana-dwarfvm.o: dwarfvm.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfvm.o -MD -MP -MF $(DEPDIR)/katana-dwarfvm.Tpo -c -o katana-dwarfvm.o `test -f 'dwarfvm.c' || echo '$(srcdir)/'`dwarfvm.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfvm.Tpo $(DEPDIR)/katana-dwarfvm.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarfvm.c' object='katana-dwarfvm.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfvm.o `test -f 'dwarfvm.c' || echo '$(srcdir)/'`dwarfvm.c

katana-dwarfvm.obj: dwarfvm.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfvm.obj -MD -MP -MF $(DEPDIR)/katana-dwarfvm.Tpo -c -o katana-dwarfvm.obj `if test -f 'dwarfvm.c'; then $(CYGPATH_W) 'dwarfvm.c'; else $(CYGPATH_W) '$(srcdir)/dwarfvm.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfvm.Tpo $(DEPDIR)/katana-dwarfvm.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarfvm.c' object='katana-dwarfvm.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfvm.obj `if test -f 'dwarfvm.c'; then $(CYGPATH_W) 'dwarfvm.c'; else $(CYGPATH_W) '$(srcdir)/dwarfvm.c'; fi`

katana-config.o: config.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-config.o -MD -MP -MF $(DEPDIR)/katana-config.Tpo -c -o katana-config.o `test -f 'config.c' || echo '$(srcdir)/'`config.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-config.Tpo $(DEPDIR)/katana-config.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='config.c' object='katana-config.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-config.o `test -f 'config.c' || echo '$(srcdir)/'`config.c

katana-config.obj: config.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-config.obj -MD -MP -MF $(DEPDIR)/katana-config.Tpo -c -o katana-config.obj `if test -f 'config.c'; then $(CYGPATH_W) 'config.c'; else $(CYGPATH_W) '$(srcdir)/config.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-config.Tpo $(DEPDIR)/katana-config.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='config.c' object='katana-config.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-config.obj `if test -f 'config.c'; then $(CYGPATH_W) 'config.c'; else $(CYGPATH_W) '$(srcdir)/config.c'; fi`

katana-patchwrite.o: patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchwrite.o -MD -MP -MF $(DEPDIR)/katana-patchwrite.Tpo -c -o katana-patchwrite.o `test -f 'patchwrite/patchwrite.c' || echo '$(srcdir)/'`patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchwrite.Tpo $(DEPDIR)/katana-patchwrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/patchwrite.c' object='katana-patchwrite.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchwrite.o `test -f 'patchwrite/patchwrite.c' || echo '$(srcdir)/'`patchwrite/patchwrite.c

katana-patchwrite.obj: patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchwrite.obj -MD -MP -MF $(DEPDIR)/katana-patchwrite.Tpo -c -o katana-patchwrite.obj `if test -f 'patchwrite/patchwrite.c'; then $(CYGPATH_W) 'patchwrite/patchwrite.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/patchwrite.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchwrite.Tpo $(DEPDIR)/katana-patchwrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/patchwrite.c' object='katana-patchwrite.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchwrite.obj `if test -f 'patchwrite/patchwrite.c'; then $(CYGPATH_W) 'patchwrite/patchwrite.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/patchwrite.c'; fi`

katana-codediff.o: patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-codediff.o -MD -MP -MF $(DEPDIR)/katana-codediff.Tpo -c -o katana-codediff.o `test -f 'patchwrite/codediff.c' || echo '$(srcdir)/'`patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-codediff.Tpo $(DEPDIR)/katana-codediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/codediff.c' object='katana-codediff.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-codediff.o `test -f 'patchwrite/codediff.c' || echo '$(srcdir)/'`patchwrite/codediff.c

katana-codediff.obj: patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-codediff.obj -MD -MP -MF $(DEPDIR)/katana-codediff.Tpo -c -o katana-codediff.obj `if test -f 'patchwrite/codediff.c'; then $(CYGPATH_W) 'patchwrite/codediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/codediff.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-codediff.Tpo $(DEPDIR)/katana-codediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/codediff.c' object='katana-codediff.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-codediff.obj `if test -f 'patchwrite/codediff.c'; then $(CYGPATH_W) 'patchwrite/codediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/codediff.c'; fi`

katana-typediff.o: patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-typediff.o -MD -MP -MF $(DEPDIR)/katana-typediff.Tpo -c -o katana-typediff.o `test -f 'patchwrite/typediff.c' || echo '$(srcdir)/'`patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-typediff.Tpo $(DEPDIR)/katana-typediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/typediff.c' object='katana-typediff.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-typediff.o `test -f 'patchwrite/typediff.c' || echo '$(srcdir)/'`patchwrite/typediff.c

katana-typediff.obj: patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-typediff.obj -MD -MP -MF $(DEPDIR)/katana-typediff.Tpo -c -o katana-typediff.obj `if test -f 'patchwrite/typediff.c'; then $(CYGPATH_W) 'patchwrite/typediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/typediff.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-typediff.Tpo $(DEPDIR)/katana-typediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/typediff.c' object='katana-typediff.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-typediff.obj `if test -f 'patchwrite/typediff.c'; then $(CYGPATH_W) 'patchwrite/typediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/typediff.c'; fi`

katana-elfwriter.o: patchwrite/elfwriter.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfwriter.o -MD -MP -MF $(DEPDIR)/katana-elfwriter.Tpo -c -o katana-elfwriter.o `test -f 'patchwrite/elfwriter.c' || echo '$(srcdir)/'`patchwrite/elfwriter.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfwriter.Tpo $(DEPDIR)/katana-elfwriter.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfwriter.c' object='katana-elfwriter.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfwriter.o `test -f 'patchwrite/elfwriter.c' || echo '$(srcdir)/'`patchwrite/elfwriter.c

katana-elfwriter.obj: patchwrite/elfwriter.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfwriter.obj -MD -MP -MF $(DEPDIR)/katana-elfwriter.Tpo -c -o katana-elfwriter.obj `if test -f 'patchwrite/elfwriter.c'; then $(CYGPATH_W) 'patchwrite/elfwriter.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfwriter.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfwriter.Tpo $(DEPDIR)/katana-elfwriter.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfwriter.c' object='katana-elfwriter.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfwriter.obj `if test -f 'patchwrite/elfwriter.c'; then $(CYGPATH_W) 'patchwrite/elfwriter.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfwriter.c'; fi`

katana-sourcetree.o: patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-sourcetree.o -MD -MP -MF $(DEPDIR)/katana-sourcetree.Tpo -c -o katana-sourcetree.o `test -f 'patchwrite/sourcetree.c' || echo '$(srcdir)/'`patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-sourcetree.Tpo $(DEPDIR)/katana-sourcetree.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/sourcetree.c' object='katana-sourcetree.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-sourcetree.o `test -f 'patchwrite/sourcetree.c' || echo '$(srcdir)/'`patchwrite/sourcetree.c

katana-sourcetree.obj: patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-sourcetree.obj -MD -MP -MF $(DEPDIR)/katana-sourcetree.Tpo -c -o katana-sourcetree.obj `if test -f 'patchwrite/sourcetree.c'; then $(CYGPATH_W) 'patchwrite/sourcetree.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/sourcetree.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-sourcetree.Tpo $(DEPDIR)/katana-sourcetree.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/sourcetree.c' object='katana-sourcetree.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-sourcetree.obj `if test -f 'patchwrite/sourcetree.c'; then $(CYGPATH_W) 'patchwrite/sourcetree.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/sourcetree.c'; fi`

katana-write_to_dwarf.o: patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-write_to_dwarf.o -MD -MP -MF $(DEPDIR)/katana-write_to_dwarf.Tpo -c -o katana-write_to_dwarf.o `test -f 'patchwrite/write_to_dwarf.c' || echo '$(srcdir)/'`patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-write_to_dwarf.Tpo $(DEPDIR)/katana-write_to_dwarf.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/write_to_dwarf.c' object='katana-write_to_dwarf.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-write_to_dwarf.o `test -f 'patchwrite/write_to_dwarf.c' || echo '$(srcdir)/'`patchwrite/write_to_dwarf.c

katana-write_to_dwarf.obj: patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-write_to_dwarf.obj -MD -MP -MF $(DEPDIR)/katana-write_to_dwarf.Tpo -c -o katana-write_to_dwarf.obj `if test -f 'patchwrite/write_to_dwarf.c'; then $(CYGPATH_W) 'patchwrite/write_to_dwarf.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/write_to_dwarf.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-write_to_dwarf.Tpo $(DEPDIR)/katana-write_to_dwarf.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/write_to_dwarf.c' object='katana-write_to_dwarf.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-write_to_dwarf.obj `if test -f 'patchwrite/write_to_dwarf.c'; then $(CYGPATH_W) 'patchwrite/write_to_dwarf.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/write_to_dwarf.c'; fi`

katana-elfcmp.o: patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfcmp.o -MD -MP -MF $(DEPDIR)/katana-elfcmp.Tpo -c -o katana-elfcmp.o `test -f 'patchwrite/elfcmp.c' || echo '$(srcdir)/'`patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfcmp.Tpo $(DEPDIR)/katana-elfcmp.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfcmp.c' object='katana-elfcmp.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfcmp.o `test -f 'patchwrite/elfcmp.c' || echo '$(srcdir)/'`patchwrite/elfcmp.c

katana-elfcmp.obj: patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfcmp.obj -MD -MP -MF $(DEPDIR)/katana-elfcmp.Tpo -c -o katana-elfcmp.obj `if test -f 'patchwrite/elfcmp.c'; then $(CYGPATH_W) 'patchwrite/elfcmp.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfcmp.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfcmp.Tpo $(DEPDIR)/katana-elfcmp.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfcmp.c' object='katana-elfcmp.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfcmp.obj `if test -f 'patchwrite/elfcmp.c'; then $(CYGPATH_W) 'patchwrite/elfcmp.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfcmp.c'; fi`

katana-hotpatch.o: patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hotpatch.o -MD -MP -MF $(DEPDIR)/katana-hotpatch.Tpo -c -o katana-hotpatch.o `test -f 'patcher/hotpatch.c' || echo '$(srcdir)/'`patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hotpatch.Tpo $(DEPDIR)/katana-hotpatch.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/hotpatch.c' object='katana-hotpatch.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hotpatch.o `test -f 'patcher/hotpatch.c' || echo '$(srcdir)/'`patcher/hotpatch.c

katana-hotpatch.obj: patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hotpatch.obj -MD -MP -MF $(DEPDIR)/katana-hotpatch.Tpo -c -o katana-hotpatch.obj `if test -f 'patcher/hotpatch.c'; then $(CYGPATH_W) 'patcher/hotpatch.c'; else $(CYGPATH_W) '$(srcdir)/patcher/hotpatch.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hotpatch.Tpo $(DEPDIR)/katana-hotpatch.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/hotpatch.c' object='katana-hotpatch.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hotpatch.obj `if test -f 'patcher/hotpatch.c'; then $(CYGPATH_W) 'patcher/hotpatch.c'; else $(CYGPATH_W) '$(srcdir)/patcher/hotpatch.c'; fi`

katana-target.o: patcher/target.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-target.o -MD -MP -MF $(DEPDIR)/katana-target.Tpo -c -o katana-target.o `test -f 'patcher/target.c' || echo '$(srcdir)/'`patcher/target.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-target.Tpo $(DEPDIR)/katana-target.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/target.c' object='katana-target.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-target.o `test -f 'patcher/target.c' || echo '$(srcdir)/'`patcher/target.c

katana-target.obj: patcher/target.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-target.obj -MD -MP -MF $(DEPDIR)/katana-target.Tpo -c -o katana-target.obj `if test -f 'patcher/target.c'; then $(CYGPATH_W) 'patcher/target.c'; else $(CYGPATH_W) '$(srcdir)/patcher/target.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-target.Tpo $(DEPDIR)/katana-target.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/target.c' object='katana-target.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-target.obj `if test -f 'patcher/target.c'; then $(CYGPATH_W) 'patcher/target.c'; else $(CYGPATH_W) '$(srcdir)/patcher/target.c'; fi`

katana-patchapply.o: patcher/patchapply.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchapply.o -MD -MP -MF $(DEPDIR)/katana-patchapply.Tpo -c -o katana-patchapply.o `test -f 'patcher/patchapply.c' || echo '$(srcdir)/'`patcher/patchapply.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchapply.Tpo $(DEPDIR)/katana-patchapply.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/patchapply.c' object='katana-patchapply.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchapply.o `test -f 'patcher/patchapply.c' || echo '$(srcdir)/'`patcher/patchapply.c

katana-patchapply.obj: patcher/patchapply.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchapply.obj -MD -MP -MF $(DEPDIR)/katana-patchapply.Tpo -c -o katana-patchapply.obj `if test -f 'patcher/patchapply.c'; then $(CYGPATH_W) 'patcher/patchapply.c'; else $(CYGPATH_W) '$(srcdir)/patcher/patchapply.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchapply.Tpo $(DEPDIR)/katana-patchapply.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/patchapply.c' object='katana-patchapply.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchapply.obj `if test -f 'patcher/patchapply.c'; then $(CYGPATH_W) 'patcher/patchapply.c'; else $(CYGPATH_W) '$(srcdir)/patcher/patchapply.c'; fi`

katana-versioning.o: patcher/versioning.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-versioning.o -MD -MP -MF $(DEPDIR)/katana-versioning.Tpo -c -o katana-versioning.o `test -f 'patcher/versioning.c' || echo '$(srcdir)/'`patcher/versioning.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-versioning.Tpo $(DEPDIR)/katana-versioning.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/versioning.c' object='katana-versioning.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-versioning.o `test -f 'patcher/versioning.c' || echo '$(srcdir)/'`patcher/versioning.c

katana-versioning.obj: patcher/versioning.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-versioning.obj -MD -MP -MF $(DEPDIR)/katana-versioning.Tpo -c -o katana-versioning.obj `if test -f 'patcher/versioning.c'; then $(CYGPATH_W) 'patcher/versioning.c'; else $(CYGPATH_W) '$(srcdir)/patcher/versioning.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-versioning.Tpo $(DEPDIR)/katana-versioning.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/versioning.c' object='katana-versioning.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-versioning.obj `if test -f 'patcher/versioning.c'; then $(CYGPATH_W) 'patcher/versioning.c'; else $(CYGPATH_W) '$(srcdir)/patcher/versioning.c'; fi`

katana-linkmap.o: patcher/linkmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-linkmap.o -MD -MP -MF $(DEPDIR)/katana-linkmap.Tpo -c -o katana-linkmap.o `test -f 'patcher/linkmap.c' || echo '$(srcdir)/'`patcher/linkmap.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-linkmap.Tpo $(DEPDIR)/katana-linkmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/linkmap.c' object='katana-linkmap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-linkmap.o `test -f 'patcher/linkmap.c' || echo '$(srcdir)/'`patcher/linkmap.c

katana-linkmap.obj: patcher/linkmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-linkmap.obj -MD -MP -MF $(DEPDIR)/katana-linkmap.Tpo -c -o katana-linkmap.obj `if test -f 'patcher/linkmap.c'; then $(CYGPATH_W) 'patcher/linkmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/linkmap.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-linkmap.Tpo $(DEPDIR)/katana-linkmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/linkmap.c' object='katana-linkmap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-linkmap.obj `if test -f 'patcher/linkmap.c'; then $(CYGPATH_W) 'patcher/linkmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/linkmap.c'; fi`

katana-safety.o: patcher/safety.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-safety.o -MD -MP -MF $(DEPDIR)/katana-safety.Tpo -c -o katana-safety.o `test -f 'patcher/safety.c' || echo '$(srcdir)/'`patcher/safety.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-safety.Tpo $(DEPDIR)/katana-safety.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/safety.c' object='katana-safety.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-safety.o `test -f 'patcher/safety.c' || echo '$(srcdir)/'`patcher/safety.c

katana-safety.obj: patcher/safety.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-safety.obj -MD -MP -MF $(DEPDIR)/katana-safety.Tpo -c -o katana-safety.obj `if test -f 'patcher/safety.c'; then $(CYGPATH_W) 'patcher/safety.c'; else $(CYGPATH_W) '$(srcdir)/patcher/safety.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-safety.Tpo $(DEPDIR)/katana-safety.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/safety.c' object='katana-safety.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-safety.obj `if test -f 'patcher/safety.c'; then $(CYGPATH_W) 'patcher/safety.c'; else $(CYGPATH_W) '$(srcdir)/patcher/safety.c'; fi`

katana-pmap.o: patcher/pmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-pmap.o -MD -MP -MF $(DEPDIR)/katana-pmap.Tpo -c -o katana-pmap.o `test -f 'patcher/pmap.c' || echo '$(srcdir)/'`patcher/pmap.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-pmap.Tpo $(DEPDIR)/katana-pmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/pmap.c' object='katana-pmap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-pmap.o `test -f 'patcher/pmap.c' || echo '$(srcdir)/'`patcher/pmap.c

katana-pmap.obj: patcher/pmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-pmap.obj -MD -MP -MF $(DEPDIR)/katana-pmap.Tpo -c -o katana-pmap.obj `if test -f 'patcher/pmap.c'; then $(CYGPATH_W) 'patcher/pmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/pmap.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-pmap.Tpo $(DEPDIR)/katana-pmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/pmap.c' object='katana-pmap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-pmap.obj `if test -f 'patcher/pmap.c'; then $(CYGPATH_W) 'patcher/pmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/pmap.c'; fi`

katana-dictionary.o: util/dictionary.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dictionary.o -MD -MP -MF $(DEPDIR)/katana-dictionary.Tpo -c -o katana-dictionary.o `test -f 'util/dictionary.c' || echo '$(srcdir)/'`util/dictionary.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dictionary.Tpo $(DEPDIR)/katana-dictionary.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/dictionary.c' object='katana-dictionary.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dictionary.o `test -f 'util/dictionary.c' || echo '$(srcdir)/'`util/dictionary.c

katana-dictionary.obj: util/dictionary.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dictionary.obj -MD -MP -MF $(DEPDIR)/katana-dictionary.Tpo -c -o katana-dictionary.obj `if test -f 'util/dictionary.c'; then $(CYGPATH_W) 'util/dictionary.c'; else $(CYGPATH_W) '$(srcdir)/util/dictionary.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dictionary.Tpo $(DEPDIR)/katana-dictionary.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/dictionary.c' object='katana-dictionary.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dictionary.obj `if test -f 'util/dictionary.c'; then $(CYGPATH_W) 'util/dictionary.c'; else $(CYGPATH_W) '$(srcdir)/util/dictionary.c'; fi`

katana-hash.o: util/hash.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hash.o -MD -MP -MF $(DEPDIR)/katana-hash.Tpo -c -o katana-hash.o `test -f 'util/hash.c' || echo '$(srcdir)/'`util/hash.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hash.Tpo $(DEPDIR)/katana-hash.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/hash.c' object='katana-hash.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hash.o `test -f 'util/hash.c' || echo '$(srcdir)/'`util/hash.c

katana-hash.obj: util/hash.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hash.obj -MD -MP -MF $(DEPDIR)/katana-hash.Tpo -c -o katana-hash.obj `if test -f 'util/hash.c'; then $(CYGPATH_W) 'util/hash.c'; else $(CYGPATH_W) '$(srcdir)/util/hash.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hash.Tpo $(DEPDIR)/katana-hash.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/hash.c' object='katana-hash.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hash.obj `if test -f 'util/hash.c'; then $(CYGPATH_W) 'util/hash.c'; else $(CYGPATH_W) '$(srcdir)/util/hash.c'; fi`

katana-util.o: util/util.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-util.o -MD -MP -MF $(DEPDIR)/katana-util.Tpo -c -o katana-util.o `test -f 'util/util.c' || echo '$(srcdir)/'`util/util.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-util.Tpo $(DEPDIR)/katana-util.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/util.c' object='katana-util.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-util.o `test -f 'util/util.c' || echo '$(srcdir)/'`util/util.c

katana-util.obj: util/util.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-util.obj -MD -MP -MF $(DEPDIR)/katana-util.Tpo -c -o katana-util.obj `if test -f 'util/util.c'; then $(CYGPATH_W) 'util/util.c'; else $(CYGPATH_W) '$(srcdir)/util/util.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-util.Tpo $(DEPDIR)/katana-util.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/util.c' object='katana-util.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-util.obj `if test -f 'util/util.c'; then $(CYGPATH_W) 'util/util.c'; else $(CYGPATH_W) '$(srcdir)/util/util.c'; fi`

katana-map.o: util/map.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-map.o -MD -MP -MF $(DEPDIR)/katana-map.Tpo -c -o katana-map.o `test -f 'util/map.c' || echo '$(srcdir)/'`util/map.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-map.Tpo $(DEPDIR)/katana-map.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/map.c' object='katana-map.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-map.o `test -f 'util/map.c' || echo '$(srcdir)/'`util/map.c

katana-map.obj: util/map.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-map.obj -MD -MP -MF $(DEPDIR)/katana-map.Tpo -c -o katana-map.obj `if test -f 'util/map.c'; then $(CYGPATH_W) 'util/map.c'; else $(CYGPATH_W) '$(srcdir)/util/map.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-map.Tpo $(DEPDIR)/katana-map.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/map.c' object='katana-map.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-map.obj `if test -f 'util/map.c'; then $(CYGPATH_W) 'util/map.c'; else $(CYGPATH_W) '$(srcdir)/util/map.c'; fi`

katana-list.o: util/list.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-list.o -MD -MP -MF $(DEPDIR)/katana-list.Tpo -c -o katana-list.o `test -f 'util/list.c' || echo '$(srcdir)/'`util/list.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-list.Tpo $(DEPDIR)/katana-list.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/list.c' object='katana-list.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-list.o `test -f 'util/list.c' || echo '$(srcdir)/'`util/list.c

katana-list.obj: util/list.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-list.obj -MD -MP -MF $(DEPDIR)/katana-list.Tpo -c -o katana-list.obj `if test -f 'util/list.c'; then $(CYGPATH_W) 'util/list.c'; else $(CYGPATH_W) '$(srcdir)/util/list.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-list.Tpo $(DEPDIR)/katana-list.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/list.c' object='katana-list.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-list.obj `if test -f 'util/list.c'; then $(CYGPATH_W) 'util/list.c'; else $(CYGPATH_W) '$(srcdir)/util/list.c'; fi`

katana-logging.o: util/logging.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-logging.o -MD -MP -MF $(DEPDIR)/katana-logging.Tpo -c -o katana-logging.o `test -f 'util/logging.c' || echo '$(srcdir)/'`util/logging.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-logging.Tpo $(DEPDIR)/katana-logging.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/logging.c' object='katana-logging.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-logging.o `test -f 'util/logging.c' || echo '$(srcdir)/'`util/logging.c

katana-logging.obj: util/logging.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-logging.obj -MD -MP -MF $(DEPDIR)/katana-logging.Tpo -c -o katana-logging.obj `if test -f 'util/logging.c'; then $(CYGPATH_W) 'util/logging.c'; else $(CYGPATH_W) '$(srcdir)/util/logging.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-logging.Tpo $(DEPDIR)/katana-logging.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/logging.c' object='katana-logging.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-logging.obj `if test -f 'util/logging.c'; then $(CYGPATH_W) 'util/logging.c'; else $(CYGPATH_W) '$(srcdir)/util/logging.c'; fi`

katana-path.o: util/path.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-path.o -MD -MP -MF $(DEPDIR)/katana-path.Tpo -c -o katana-path.o `test -f 'util/path.c' || echo '$(srcdir)/'`util/path.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-path.Tpo $(DEPDIR)/katana-path.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/path.c' object='katana-path.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-path.o `test -f 'util/path.c' || echo '$(srcdir)/'`util/path.c

katana-path.obj: util/path.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-path.obj -MD -MP -MF $(DEPDIR)/katana-path.Tpo -c -o katana-path.obj `if test -f 'util/path.c'; then $(CYGPATH_W) 'util/path.c'; else $(CYGPATH_W) '$(srcdir)/util/path.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-path.Tpo $(DEPDIR)/katana-path.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/path.c' object='katana-path.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-path.obj `if test -f 'util/path.c'; then $(CYGPATH_W) 'util/path.c'; else $(CYGPATH_W) '$(srcdir)/util/path.c'; fi`

katana-refcounted.o: util/refcounted.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-refcounted.o -MD -MP -MF $(DEPDIR)/katana-refcounted.Tpo -c -o katana-refcounted.o `test -f 'util/refcounted.c' || echo '$(srcdir)/'`util/refcounted.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-refcounted.Tpo $(DEPDIR)/katana-refcounted.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/refcounted.c' object='katana-refcounted.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-refcounted.o `test -f 'util/refcounted.c' || echo '$(srcdir)/'`util/refcounted.c

katana-refcounted.obj: util/refcounted.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-refcounted.obj -MD -MP -MF $(DEPDIR)/katana-refcounted.Tpo -c -o katana-refcounted.obj `if test -f 'util/refcounted.c'; then $(CYGPATH_W) 'util/refcounted.c'; else $(CYGPATH_W) '$(srcdir)/util/refcounted.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-refcounted.Tpo $(DEPDIR)/katana-refcounted.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/refcounted.c' object='katana-refcounted.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-refcounted.obj `if test -f 'util/refcounted.c'; then $(CYGPATH_W) 'util/refcounted.c'; else $(CYGPATH_W) '$(srcdir)/util/refcounted.c'; fi`

katana-fdedump.o: info/fdedump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fdedump.o -MD -MP -MF $(DEPDIR)/katana-fdedump.Tpo -c -o katana-fdedump.o `test -f 'info/fdedump.c' || echo '$(srcdir)/'`info/fdedump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fdedump.Tpo $(DEPDIR)/katana-fdedump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/fdedump.c' object='katana-fdedump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fdedump.o `test -f 'info/fdedump.c' || echo '$(srcdir)/'`info/fdedump.c

katana-fdedump.obj: info/fdedump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fdedump.obj -MD -MP -MF $(DEPDIR)/katana-fdedump.Tpo -c -o katana-fdedump.obj `if test -f 'info/fdedump.c'; then $(CYGPATH_W) 'info/fdedump.c'; else $(CYGPATH_W) '$(srcdir)/info/fdedump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fdedump.Tpo $(DEPDIR)/katana-fdedump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/fdedump.c' object='katana-fdedump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fdedump.obj `if test -f 'info/fdedump.c'; then $(CYGPATH_W) 'info/fdedump.c'; else $(CYGPATH_W) '$(srcdir)/info/fdedump.c'; fi`

katana-dwinfo_dump.o: info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwinfo_dump.o -MD -MP -MF $(DEPDIR)/katana-dwinfo_dump.Tpo -c -o katana-dwinfo_dump.o `test -f 'info/dwinfo_dump.c' || echo '$(srcdir)/'`info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwinfo_dump.Tpo $(DEPDIR)/katana-dwinfo_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/dwinfo_dump.c' object='katana-dwinfo_dump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwinfo_dump.o `test -f 'info/dwinfo_dump.c' || echo '$(srcdir)/'`info/dwinfo_dump.c

katana-dwinfo_dump.obj: info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwinfo_dump.obj -MD -MP -MF $(DEPDIR)/katana-dwinfo_dump.Tpo -c -o katana-dwinfo_dump.obj `if test -f 'info/dwinfo_dump.c'; then $(CYGPATH_W) 'info/dwinfo_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/dwinfo_dump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwinfo_dump.Tpo $(DEPDIR)/katana-dwinfo_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/dwinfo_dump.c' object='katana-dwinfo_dump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwinfo_dump.obj `if test -f 'info/dwinfo_dump.c'; then $(CYGPATH_W) 'info/dwinfo_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/dwinfo_dump.c'; fi`

katana-unsafe_funcs_dump.o: info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-unsafe_funcs_dump.o -MD -MP -MF $(DEPDIR)/katana-unsafe_funcs_dump.Tpo -c -o katana-unsafe_funcs_dump.o `test -f 'info/unsafe_funcs_dump.c' || echo '$(srcdir)/'`info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-unsafe_funcs_dump.Tpo $(DEPDIR)/katana-unsafe_funcs_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/unsafe_funcs_dump.c' object='katana-unsafe_funcs_dump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-unsafe_funcs_dump.o `test -f 'info/unsafe_funcs_dump.c' || echo '$(srcdir)/'`info/unsafe_funcs_dump.c

katana-unsafe_funcs_dump.obj: info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-unsafe_funcs_dump.obj -MD -MP -MF $(DEPDIR)/katana-unsafe_funcs_dump.Tpo -c -o katana-unsafe_funcs_dump.obj `if test -f 'info/unsafe_funcs_dump.c'; then $(CYGPATH_W) 'info/unsafe_funcs_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/unsafe_funcs_dump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-unsafe_funcs_dump.Tpo $(DEPDIR)/katana-unsafe_funcs_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/unsafe_funcs_dump.c' object='katana-unsafe_funcs_dump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-unsafe_funcs_dump.obj `if test -f 'info/unsafe_funcs_dump.c'; then $(CYGPATH_W) 'info/unsafe_funcs_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/unsafe_funcs_dump.c'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
