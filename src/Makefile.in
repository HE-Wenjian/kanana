# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = katana$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__objects_1 = katana-patchwrite.$(OBJEXT) katana-codediff.$(OBJEXT) \
	katana-typediff.$(OBJEXT) katana-sourcetree.$(OBJEXT) \
	katana-write_to_dwarf.$(OBJEXT) katana-elfcmp.$(OBJEXT)
am__objects_2 = katana-hotpatch.$(OBJEXT) katana-target.$(OBJEXT) \
	katana-patchapply.$(OBJEXT) katana-versioning.$(OBJEXT) \
	katana-linkmap.$(OBJEXT) katana-safety.$(OBJEXT) \
	katana-pmap.$(OBJEXT)
am__objects_3 = katana-dictionary.$(OBJEXT) katana-hash.$(OBJEXT) \
	katana-util.$(OBJEXT) katana-map.$(OBJEXT) \
	katana-list.$(OBJEXT) katana-logging.$(OBJEXT) \
	katana-path.$(OBJEXT) katana-refcounted.$(OBJEXT) \
	katana-stack.$(OBJEXT) katana-cxxutil.$(OBJEXT) \
	katana-growingBuffer.$(OBJEXT) katana-file.$(OBJEXT)
am__objects_4 = katana-fdedump.$(OBJEXT) katana-dwinfo_dump.$(OBJEXT) \
	katana-unsafe_funcs_dump.$(OBJEXT)
am__objects_5 = katana-rewrite.$(OBJEXT)
am__objects_6 = katana-command.$(OBJEXT) katana-loadCommand.$(OBJEXT) \
	katana-saveCommand.$(OBJEXT) katana-replaceCommand.$(OBJEXT) \
	katana-dwarfscriptCommand.$(OBJEXT) \
	katana-shellCommand.$(OBJEXT) katana-infoCommand.$(OBJEXT) \
	katana-hashCommand.$(OBJEXT)
am__objects_7 = katana-elfVariableData.$(OBJEXT) \
	katana-rawVariableData.$(OBJEXT) katana-arrayData.$(OBJEXT) \
	katana-elfSectionData.$(OBJEXT)
am__objects_8 = katana-dwarfscript.yy.$(OBJEXT) \
	katana-dwarfscript.tab.$(OBJEXT)
am__objects_9 = katana-shell.$(OBJEXT) katana-shell.yy.$(OBJEXT) \
	katana-shell.tab.$(OBJEXT) katana-param.$(OBJEXT) \
	katana-variable.$(OBJEXT) katana-arrayAccessParam.$(OBJEXT) \
	$(am__objects_6) $(am__objects_7) $(am__objects_8)
am_katana_OBJECTS = katana-katana.$(OBJEXT) \
	katana-dwarftypes.$(OBJEXT) katana-elfparse.$(OBJEXT) \
	katana-elfutil.$(OBJEXT) katana-types.$(OBJEXT) \
	katana-dwarf_instr.$(OBJEXT) katana-register.$(OBJEXT) \
	katana-relocation.$(OBJEXT) katana-symbol.$(OBJEXT) \
	katana-fderead.$(OBJEXT) katana-dwarfvm.$(OBJEXT) \
	katana-config.$(OBJEXT) katana-leb.$(OBJEXT) \
	katana-callFrameInfo.$(OBJEXT) katana-commandLine.$(OBJEXT) \
	katana-elfwriter.$(OBJEXT) $(am__objects_1) $(am__objects_2) \
	$(am__objects_3) $(am__objects_4) $(am__objects_5) \
	$(am__objects_9)
katana_OBJECTS = $(am_katana_OBJECTS)
katana_DEPENDENCIES =
katana_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(katana_LDFLAGS) \
	$(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(katana_SOURCES)
DIST_SOURCES = $(katana_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EXEEXT = @EXEEXT@
HAVE_BISON = @HAVE_BISON@
HAVE_FLEX = @HAVE_FLEX@
HAVE_PYTHON = @HAVE_PYTHON@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

#File: Makefile.am
#Author: James Oakley
SUBDIRS = shell
INCLUDEFLAGS = -I ../include -I /usr/local/include/libdwarf -I /usr/include/libdwarf
DEFINEFLAGS = -D_POSIX_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE -D_GNU_SOURCE -DDEBUG -Doff64_t=__off64_t 
katana_CFLAGS = $(INCLUDEFLAGS) -g -Wall -Werror -Wno-error=pointer-sign -std=c99 $(DEFINEFLAGS)
katana_CPPFLAGS = $(INCLUDEFLAGS) -g -Wall -Werror -Wno-error=pointer-sign  $(DEFINEFLAGS)
katana_LDFLAGS = -L /usr/local/lib -L ../external/
katana_LDADD = -ldwarf -lelf -lm -lunwind-generic -lunwind-ptrace -lreadline
PATCHER_SRC = patcher/hotpatch.c patcher/target.c patcher/patchapply.c patcher/versioning.c patcher/linkmap.c patcher/safety.c patcher/pmap.c
PATCHER_H = patcher/hotpatch.h patcher/target.h patcher/patchapply.h patcher/versioning.h patcher/linkmap.h patcher/safety.h patcher/pmap.h
PATCHWRITE_SRC = patchwrite/patchwrite.c patchwrite/codediff.c patchwrite/typediff.c  patchwrite/sourcetree.c patchwrite/write_to_dwarf.c patchwrite/elfcmp.c
PATCHWRITE_H = patchwrite/patchwrite.h patchwrite/codediff.h patchwrite/typediff.h patchwrite/sourcetree.h patchwrite/write_to_dwarf.h patchwrite/elfcmp.h
UTIL_SRC = util/dictionary.c util/hash.c util/util.c util/map.c util/list.c util/logging.c util/path.c util/refcounted.c util/stack.c util/cxxutil.cpp util/growingBuffer.c util/file.c
UTIL_H = util/dictionary.h util/hash.h util/util.h util/map.h util/list.h util/logging.h util/path.h util/refcounted.h util/stack.h util/cxxutil.h util/growingBuffer.h util/file.h
SHELL_VARIABLE_SRC = shell/variableTypes/elfVariableData.cpp shell/variableTypes/rawVariableData.cpp shell/variableTypes/arrayData.cpp shell/variableTypes/elfSectionData.cpp
SHELL_VARIABLE_H = shell/variableTypes/elfVariableData.h shell/variableTypes/rawVariableData.h shell/variableTypes/arrayData.h shell/variableTypes/elfSectionData.h
SHELL_COMMANDS_SRC = shell/commands/command.cpp shell/commands/loadCommand.cpp shell/commands/saveCommand.cpp shell/commands/replaceCommand.cpp shell/commands/dwarfscriptCommand.cpp shell/commands/shellCommand.cpp shell/commands/infoCommand.cpp  shell/commands/hashCommand.cpp
SHELL_COMMANDS_H = shell/commands/command.h shell/commands/loadCommand.h shell/commands/saveCommand.h shell/commands/replaceCommand.h shell/commands/dwarfscriptCommand.h shell/commands/shellCommand.h shell/commands/infoCommand.h shell/commands/hashCommand.cpp
DWARFSCRIPT_SRC = shell/dwarfscript/dwarfscript.yy.c shell/dwarfscript/dwarfscript.tab.c
DWARFSCRIPT_H = shell/dwarfscript/dwarfscript.tab.h
SHELL_SRC = shell/shell.cpp  shell/shell.yy.cpp shell/shell.tab.cpp shell/param.cpp shell/variable.cpp shell/arrayAccessParam.cpp $(SHELL_COMMANDS_SRC) $(SHELL_VARIABLE_SRC) $(DWARFSCRIPT_SRC)
SHELL_H = shell/shell.h shell/parse_helper.h shell/shell.tab.h shell/param.h shell/variable.h  shell/arrayAccessParam.h $(SHELL_COMMANDS_SRC) $(SHELL_VARIABLE_H) $(DWARFSCRIPT_H)
INFO_SRC = info/fdedump.c info/dwinfo_dump.c  info/unsafe_funcs_dump.c
INFO_H = info/fdedump.h info/dwinfo_dump.h  info/unsafe_funcs_dump.h
REWRITER_SRC = rewriter/rewrite.c
REWRITER_H = rewriter/rewrite.h
H_FILES = dwarftypes.h elfparse.h elfutil.h types.h dwarf_instr.h register.h relocation.h symbol.h fderead.h dwarfvm.h config.h arch.h constants.h leb.h callFrameInfo.h elfwriter.h $(PATCHER_H) $(PATCHWRITE_H) $(UTIL_H) $(INFO_H) $(REWRITER_H) $(SHELL_H)
EXTRA_DIST = $(H_FILES)
katana_SOURCES = katana.c dwarftypes.c   elfparse.c elfutil.c  types.c  dwarf_instr.c register.c relocation.c symbol.c fderead.c dwarfvm.c config.c leb.c callFrameInfo.c commandLine.c  elfwriter.c $(PATCHWRITE_SRC) $(PATCHER_SRC) $(UTIL_SRC) $(INFO_SRC) $(REWRITER_SRC) $(SHELL_SRC)
BFLAGS = -d -v
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
katana$(EXEEXT): $(katana_OBJECTS) $(katana_DEPENDENCIES) 
	@rm -f katana$(EXEEXT)
	$(katana_LINK) $(katana_OBJECTS) $(katana_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-arrayAccessParam.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-arrayData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-callFrameInfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-codediff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-command.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-commandLine.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-config.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-cxxutil.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dictionary.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarf_instr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarfscript.tab.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarfscript.yy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarfscriptCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarftypes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwarfvm.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-dwinfo_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfSectionData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfVariableData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfcmp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfparse.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfutil.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-elfwriter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-fdedump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-fderead.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-file.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-growingBuffer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-hash.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-hashCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-hotpatch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-infoCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-katana.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-leb.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-linkmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-list.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-loadCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-logging.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-map.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-param.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-patchapply.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-patchwrite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-path.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-pmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-rawVariableData.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-refcounted.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-register.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-relocation.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-replaceCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-rewrite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-safety.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-saveCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-shell.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-shell.tab.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-shell.yy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-shellCommand.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-sourcetree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-stack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-symbol.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-target.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-typediff.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-types.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-unsafe_funcs_dump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-variable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-versioning.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/katana-write_to_dwarf.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

katana-katana.o: katana.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-katana.o -MD -MP -MF $(DEPDIR)/katana-katana.Tpo -c -o katana-katana.o `test -f 'katana.c' || echo '$(srcdir)/'`katana.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-katana.Tpo $(DEPDIR)/katana-katana.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='katana.c' object='katana-katana.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-katana.o `test -f 'katana.c' || echo '$(srcdir)/'`katana.c

katana-katana.obj: katana.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-katana.obj -MD -MP -MF $(DEPDIR)/katana-katana.Tpo -c -o katana-katana.obj `if test -f 'katana.c'; then $(CYGPATH_W) 'katana.c'; else $(CYGPATH_W) '$(srcdir)/katana.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-katana.Tpo $(DEPDIR)/katana-katana.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='katana.c' object='katana-katana.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-katana.obj `if test -f 'katana.c'; then $(CYGPATH_W) 'katana.c'; else $(CYGPATH_W) '$(srcdir)/katana.c'; fi`

katana-dwarftypes.o: dwarftypes.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarftypes.o -MD -MP -MF $(DEPDIR)/katana-dwarftypes.Tpo -c -o katana-dwarftypes.o `test -f 'dwarftypes.c' || echo '$(srcdir)/'`dwarftypes.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarftypes.Tpo $(DEPDIR)/katana-dwarftypes.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarftypes.c' object='katana-dwarftypes.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarftypes.o `test -f 'dwarftypes.c' || echo '$(srcdir)/'`dwarftypes.c

katana-dwarftypes.obj: dwarftypes.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarftypes.obj -MD -MP -MF $(DEPDIR)/katana-dwarftypes.Tpo -c -o katana-dwarftypes.obj `if test -f 'dwarftypes.c'; then $(CYGPATH_W) 'dwarftypes.c'; else $(CYGPATH_W) '$(srcdir)/dwarftypes.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarftypes.Tpo $(DEPDIR)/katana-dwarftypes.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarftypes.c' object='katana-dwarftypes.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarftypes.obj `if test -f 'dwarftypes.c'; then $(CYGPATH_W) 'dwarftypes.c'; else $(CYGPATH_W) '$(srcdir)/dwarftypes.c'; fi`

katana-elfparse.o: elfparse.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfparse.o -MD -MP -MF $(DEPDIR)/katana-elfparse.Tpo -c -o katana-elfparse.o `test -f 'elfparse.c' || echo '$(srcdir)/'`elfparse.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfparse.Tpo $(DEPDIR)/katana-elfparse.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfparse.c' object='katana-elfparse.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfparse.o `test -f 'elfparse.c' || echo '$(srcdir)/'`elfparse.c

katana-elfparse.obj: elfparse.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfparse.obj -MD -MP -MF $(DEPDIR)/katana-elfparse.Tpo -c -o katana-elfparse.obj `if test -f 'elfparse.c'; then $(CYGPATH_W) 'elfparse.c'; else $(CYGPATH_W) '$(srcdir)/elfparse.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfparse.Tpo $(DEPDIR)/katana-elfparse.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfparse.c' object='katana-elfparse.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfparse.obj `if test -f 'elfparse.c'; then $(CYGPATH_W) 'elfparse.c'; else $(CYGPATH_W) '$(srcdir)/elfparse.c'; fi`

katana-elfutil.o: elfutil.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfutil.o -MD -MP -MF $(DEPDIR)/katana-elfutil.Tpo -c -o katana-elfutil.o `test -f 'elfutil.c' || echo '$(srcdir)/'`elfutil.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfutil.Tpo $(DEPDIR)/katana-elfutil.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfutil.c' object='katana-elfutil.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfutil.o `test -f 'elfutil.c' || echo '$(srcdir)/'`elfutil.c

katana-elfutil.obj: elfutil.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfutil.obj -MD -MP -MF $(DEPDIR)/katana-elfutil.Tpo -c -o katana-elfutil.obj `if test -f 'elfutil.c'; then $(CYGPATH_W) 'elfutil.c'; else $(CYGPATH_W) '$(srcdir)/elfutil.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfutil.Tpo $(DEPDIR)/katana-elfutil.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfutil.c' object='katana-elfutil.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfutil.obj `if test -f 'elfutil.c'; then $(CYGPATH_W) 'elfutil.c'; else $(CYGPATH_W) '$(srcdir)/elfutil.c'; fi`

katana-types.o: types.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-types.o -MD -MP -MF $(DEPDIR)/katana-types.Tpo -c -o katana-types.o `test -f 'types.c' || echo '$(srcdir)/'`types.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-types.Tpo $(DEPDIR)/katana-types.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='types.c' object='katana-types.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-types.o `test -f 'types.c' || echo '$(srcdir)/'`types.c

katana-types.obj: types.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-types.obj -MD -MP -MF $(DEPDIR)/katana-types.Tpo -c -o katana-types.obj `if test -f 'types.c'; then $(CYGPATH_W) 'types.c'; else $(CYGPATH_W) '$(srcdir)/types.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-types.Tpo $(DEPDIR)/katana-types.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='types.c' object='katana-types.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-types.obj `if test -f 'types.c'; then $(CYGPATH_W) 'types.c'; else $(CYGPATH_W) '$(srcdir)/types.c'; fi`

katana-dwarf_instr.o: dwarf_instr.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarf_instr.o -MD -MP -MF $(DEPDIR)/katana-dwarf_instr.Tpo -c -o katana-dwarf_instr.o `test -f 'dwarf_instr.c' || echo '$(srcdir)/'`dwarf_instr.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarf_instr.Tpo $(DEPDIR)/katana-dwarf_instr.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarf_instr.c' object='katana-dwarf_instr.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarf_instr.o `test -f 'dwarf_instr.c' || echo '$(srcdir)/'`dwarf_instr.c

katana-dwarf_instr.obj: dwarf_instr.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarf_instr.obj -MD -MP -MF $(DEPDIR)/katana-dwarf_instr.Tpo -c -o katana-dwarf_instr.obj `if test -f 'dwarf_instr.c'; then $(CYGPATH_W) 'dwarf_instr.c'; else $(CYGPATH_W) '$(srcdir)/dwarf_instr.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarf_instr.Tpo $(DEPDIR)/katana-dwarf_instr.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarf_instr.c' object='katana-dwarf_instr.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarf_instr.obj `if test -f 'dwarf_instr.c'; then $(CYGPATH_W) 'dwarf_instr.c'; else $(CYGPATH_W) '$(srcdir)/dwarf_instr.c'; fi`

katana-register.o: register.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-register.o -MD -MP -MF $(DEPDIR)/katana-register.Tpo -c -o katana-register.o `test -f 'register.c' || echo '$(srcdir)/'`register.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-register.Tpo $(DEPDIR)/katana-register.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='register.c' object='katana-register.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-register.o `test -f 'register.c' || echo '$(srcdir)/'`register.c

katana-register.obj: register.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-register.obj -MD -MP -MF $(DEPDIR)/katana-register.Tpo -c -o katana-register.obj `if test -f 'register.c'; then $(CYGPATH_W) 'register.c'; else $(CYGPATH_W) '$(srcdir)/register.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-register.Tpo $(DEPDIR)/katana-register.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='register.c' object='katana-register.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-register.obj `if test -f 'register.c'; then $(CYGPATH_W) 'register.c'; else $(CYGPATH_W) '$(srcdir)/register.c'; fi`

katana-relocation.o: relocation.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-relocation.o -MD -MP -MF $(DEPDIR)/katana-relocation.Tpo -c -o katana-relocation.o `test -f 'relocation.c' || echo '$(srcdir)/'`relocation.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-relocation.Tpo $(DEPDIR)/katana-relocation.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='relocation.c' object='katana-relocation.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-relocation.o `test -f 'relocation.c' || echo '$(srcdir)/'`relocation.c

katana-relocation.obj: relocation.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-relocation.obj -MD -MP -MF $(DEPDIR)/katana-relocation.Tpo -c -o katana-relocation.obj `if test -f 'relocation.c'; then $(CYGPATH_W) 'relocation.c'; else $(CYGPATH_W) '$(srcdir)/relocation.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-relocation.Tpo $(DEPDIR)/katana-relocation.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='relocation.c' object='katana-relocation.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-relocation.obj `if test -f 'relocation.c'; then $(CYGPATH_W) 'relocation.c'; else $(CYGPATH_W) '$(srcdir)/relocation.c'; fi`

katana-symbol.o: symbol.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-symbol.o -MD -MP -MF $(DEPDIR)/katana-symbol.Tpo -c -o katana-symbol.o `test -f 'symbol.c' || echo '$(srcdir)/'`symbol.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-symbol.Tpo $(DEPDIR)/katana-symbol.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='symbol.c' object='katana-symbol.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-symbol.o `test -f 'symbol.c' || echo '$(srcdir)/'`symbol.c

katana-symbol.obj: symbol.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-symbol.obj -MD -MP -MF $(DEPDIR)/katana-symbol.Tpo -c -o katana-symbol.obj `if test -f 'symbol.c'; then $(CYGPATH_W) 'symbol.c'; else $(CYGPATH_W) '$(srcdir)/symbol.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-symbol.Tpo $(DEPDIR)/katana-symbol.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='symbol.c' object='katana-symbol.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-symbol.obj `if test -f 'symbol.c'; then $(CYGPATH_W) 'symbol.c'; else $(CYGPATH_W) '$(srcdir)/symbol.c'; fi`

katana-fderead.o: fderead.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fderead.o -MD -MP -MF $(DEPDIR)/katana-fderead.Tpo -c -o katana-fderead.o `test -f 'fderead.c' || echo '$(srcdir)/'`fderead.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fderead.Tpo $(DEPDIR)/katana-fderead.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='fderead.c' object='katana-fderead.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fderead.o `test -f 'fderead.c' || echo '$(srcdir)/'`fderead.c

katana-fderead.obj: fderead.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fderead.obj -MD -MP -MF $(DEPDIR)/katana-fderead.Tpo -c -o katana-fderead.obj `if test -f 'fderead.c'; then $(CYGPATH_W) 'fderead.c'; else $(CYGPATH_W) '$(srcdir)/fderead.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fderead.Tpo $(DEPDIR)/katana-fderead.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='fderead.c' object='katana-fderead.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fderead.obj `if test -f 'fderead.c'; then $(CYGPATH_W) 'fderead.c'; else $(CYGPATH_W) '$(srcdir)/fderead.c'; fi`

katana-dwarfvm.o: dwarfvm.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfvm.o -MD -MP -MF $(DEPDIR)/katana-dwarfvm.Tpo -c -o katana-dwarfvm.o `test -f 'dwarfvm.c' || echo '$(srcdir)/'`dwarfvm.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfvm.Tpo $(DEPDIR)/katana-dwarfvm.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarfvm.c' object='katana-dwarfvm.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfvm.o `test -f 'dwarfvm.c' || echo '$(srcdir)/'`dwarfvm.c

katana-dwarfvm.obj: dwarfvm.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfvm.obj -MD -MP -MF $(DEPDIR)/katana-dwarfvm.Tpo -c -o katana-dwarfvm.obj `if test -f 'dwarfvm.c'; then $(CYGPATH_W) 'dwarfvm.c'; else $(CYGPATH_W) '$(srcdir)/dwarfvm.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfvm.Tpo $(DEPDIR)/katana-dwarfvm.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='dwarfvm.c' object='katana-dwarfvm.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfvm.obj `if test -f 'dwarfvm.c'; then $(CYGPATH_W) 'dwarfvm.c'; else $(CYGPATH_W) '$(srcdir)/dwarfvm.c'; fi`

katana-config.o: config.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-config.o -MD -MP -MF $(DEPDIR)/katana-config.Tpo -c -o katana-config.o `test -f 'config.c' || echo '$(srcdir)/'`config.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-config.Tpo $(DEPDIR)/katana-config.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='config.c' object='katana-config.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-config.o `test -f 'config.c' || echo '$(srcdir)/'`config.c

katana-config.obj: config.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-config.obj -MD -MP -MF $(DEPDIR)/katana-config.Tpo -c -o katana-config.obj `if test -f 'config.c'; then $(CYGPATH_W) 'config.c'; else $(CYGPATH_W) '$(srcdir)/config.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-config.Tpo $(DEPDIR)/katana-config.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='config.c' object='katana-config.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-config.obj `if test -f 'config.c'; then $(CYGPATH_W) 'config.c'; else $(CYGPATH_W) '$(srcdir)/config.c'; fi`

katana-leb.o: leb.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-leb.o -MD -MP -MF $(DEPDIR)/katana-leb.Tpo -c -o katana-leb.o `test -f 'leb.c' || echo '$(srcdir)/'`leb.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-leb.Tpo $(DEPDIR)/katana-leb.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='leb.c' object='katana-leb.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-leb.o `test -f 'leb.c' || echo '$(srcdir)/'`leb.c

katana-leb.obj: leb.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-leb.obj -MD -MP -MF $(DEPDIR)/katana-leb.Tpo -c -o katana-leb.obj `if test -f 'leb.c'; then $(CYGPATH_W) 'leb.c'; else $(CYGPATH_W) '$(srcdir)/leb.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-leb.Tpo $(DEPDIR)/katana-leb.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='leb.c' object='katana-leb.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-leb.obj `if test -f 'leb.c'; then $(CYGPATH_W) 'leb.c'; else $(CYGPATH_W) '$(srcdir)/leb.c'; fi`

katana-callFrameInfo.o: callFrameInfo.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-callFrameInfo.o -MD -MP -MF $(DEPDIR)/katana-callFrameInfo.Tpo -c -o katana-callFrameInfo.o `test -f 'callFrameInfo.c' || echo '$(srcdir)/'`callFrameInfo.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-callFrameInfo.Tpo $(DEPDIR)/katana-callFrameInfo.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='callFrameInfo.c' object='katana-callFrameInfo.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-callFrameInfo.o `test -f 'callFrameInfo.c' || echo '$(srcdir)/'`callFrameInfo.c

katana-callFrameInfo.obj: callFrameInfo.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-callFrameInfo.obj -MD -MP -MF $(DEPDIR)/katana-callFrameInfo.Tpo -c -o katana-callFrameInfo.obj `if test -f 'callFrameInfo.c'; then $(CYGPATH_W) 'callFrameInfo.c'; else $(CYGPATH_W) '$(srcdir)/callFrameInfo.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-callFrameInfo.Tpo $(DEPDIR)/katana-callFrameInfo.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='callFrameInfo.c' object='katana-callFrameInfo.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-callFrameInfo.obj `if test -f 'callFrameInfo.c'; then $(CYGPATH_W) 'callFrameInfo.c'; else $(CYGPATH_W) '$(srcdir)/callFrameInfo.c'; fi`

katana-commandLine.o: commandLine.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-commandLine.o -MD -MP -MF $(DEPDIR)/katana-commandLine.Tpo -c -o katana-commandLine.o `test -f 'commandLine.c' || echo '$(srcdir)/'`commandLine.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-commandLine.Tpo $(DEPDIR)/katana-commandLine.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='commandLine.c' object='katana-commandLine.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-commandLine.o `test -f 'commandLine.c' || echo '$(srcdir)/'`commandLine.c

katana-commandLine.obj: commandLine.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-commandLine.obj -MD -MP -MF $(DEPDIR)/katana-commandLine.Tpo -c -o katana-commandLine.obj `if test -f 'commandLine.c'; then $(CYGPATH_W) 'commandLine.c'; else $(CYGPATH_W) '$(srcdir)/commandLine.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-commandLine.Tpo $(DEPDIR)/katana-commandLine.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='commandLine.c' object='katana-commandLine.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-commandLine.obj `if test -f 'commandLine.c'; then $(CYGPATH_W) 'commandLine.c'; else $(CYGPATH_W) '$(srcdir)/commandLine.c'; fi`

katana-elfwriter.o: elfwriter.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfwriter.o -MD -MP -MF $(DEPDIR)/katana-elfwriter.Tpo -c -o katana-elfwriter.o `test -f 'elfwriter.c' || echo '$(srcdir)/'`elfwriter.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfwriter.Tpo $(DEPDIR)/katana-elfwriter.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfwriter.c' object='katana-elfwriter.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfwriter.o `test -f 'elfwriter.c' || echo '$(srcdir)/'`elfwriter.c

katana-elfwriter.obj: elfwriter.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfwriter.obj -MD -MP -MF $(DEPDIR)/katana-elfwriter.Tpo -c -o katana-elfwriter.obj `if test -f 'elfwriter.c'; then $(CYGPATH_W) 'elfwriter.c'; else $(CYGPATH_W) '$(srcdir)/elfwriter.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfwriter.Tpo $(DEPDIR)/katana-elfwriter.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='elfwriter.c' object='katana-elfwriter.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfwriter.obj `if test -f 'elfwriter.c'; then $(CYGPATH_W) 'elfwriter.c'; else $(CYGPATH_W) '$(srcdir)/elfwriter.c'; fi`

katana-patchwrite.o: patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchwrite.o -MD -MP -MF $(DEPDIR)/katana-patchwrite.Tpo -c -o katana-patchwrite.o `test -f 'patchwrite/patchwrite.c' || echo '$(srcdir)/'`patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchwrite.Tpo $(DEPDIR)/katana-patchwrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/patchwrite.c' object='katana-patchwrite.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchwrite.o `test -f 'patchwrite/patchwrite.c' || echo '$(srcdir)/'`patchwrite/patchwrite.c

katana-patchwrite.obj: patchwrite/patchwrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchwrite.obj -MD -MP -MF $(DEPDIR)/katana-patchwrite.Tpo -c -o katana-patchwrite.obj `if test -f 'patchwrite/patchwrite.c'; then $(CYGPATH_W) 'patchwrite/patchwrite.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/patchwrite.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchwrite.Tpo $(DEPDIR)/katana-patchwrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/patchwrite.c' object='katana-patchwrite.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchwrite.obj `if test -f 'patchwrite/patchwrite.c'; then $(CYGPATH_W) 'patchwrite/patchwrite.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/patchwrite.c'; fi`

katana-codediff.o: patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-codediff.o -MD -MP -MF $(DEPDIR)/katana-codediff.Tpo -c -o katana-codediff.o `test -f 'patchwrite/codediff.c' || echo '$(srcdir)/'`patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-codediff.Tpo $(DEPDIR)/katana-codediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/codediff.c' object='katana-codediff.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-codediff.o `test -f 'patchwrite/codediff.c' || echo '$(srcdir)/'`patchwrite/codediff.c

katana-codediff.obj: patchwrite/codediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-codediff.obj -MD -MP -MF $(DEPDIR)/katana-codediff.Tpo -c -o katana-codediff.obj `if test -f 'patchwrite/codediff.c'; then $(CYGPATH_W) 'patchwrite/codediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/codediff.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-codediff.Tpo $(DEPDIR)/katana-codediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/codediff.c' object='katana-codediff.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-codediff.obj `if test -f 'patchwrite/codediff.c'; then $(CYGPATH_W) 'patchwrite/codediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/codediff.c'; fi`

katana-typediff.o: patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-typediff.o -MD -MP -MF $(DEPDIR)/katana-typediff.Tpo -c -o katana-typediff.o `test -f 'patchwrite/typediff.c' || echo '$(srcdir)/'`patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-typediff.Tpo $(DEPDIR)/katana-typediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/typediff.c' object='katana-typediff.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-typediff.o `test -f 'patchwrite/typediff.c' || echo '$(srcdir)/'`patchwrite/typediff.c

katana-typediff.obj: patchwrite/typediff.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-typediff.obj -MD -MP -MF $(DEPDIR)/katana-typediff.Tpo -c -o katana-typediff.obj `if test -f 'patchwrite/typediff.c'; then $(CYGPATH_W) 'patchwrite/typediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/typediff.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-typediff.Tpo $(DEPDIR)/katana-typediff.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/typediff.c' object='katana-typediff.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-typediff.obj `if test -f 'patchwrite/typediff.c'; then $(CYGPATH_W) 'patchwrite/typediff.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/typediff.c'; fi`

katana-sourcetree.o: patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-sourcetree.o -MD -MP -MF $(DEPDIR)/katana-sourcetree.Tpo -c -o katana-sourcetree.o `test -f 'patchwrite/sourcetree.c' || echo '$(srcdir)/'`patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-sourcetree.Tpo $(DEPDIR)/katana-sourcetree.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/sourcetree.c' object='katana-sourcetree.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-sourcetree.o `test -f 'patchwrite/sourcetree.c' || echo '$(srcdir)/'`patchwrite/sourcetree.c

katana-sourcetree.obj: patchwrite/sourcetree.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-sourcetree.obj -MD -MP -MF $(DEPDIR)/katana-sourcetree.Tpo -c -o katana-sourcetree.obj `if test -f 'patchwrite/sourcetree.c'; then $(CYGPATH_W) 'patchwrite/sourcetree.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/sourcetree.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-sourcetree.Tpo $(DEPDIR)/katana-sourcetree.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/sourcetree.c' object='katana-sourcetree.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-sourcetree.obj `if test -f 'patchwrite/sourcetree.c'; then $(CYGPATH_W) 'patchwrite/sourcetree.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/sourcetree.c'; fi`

katana-write_to_dwarf.o: patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-write_to_dwarf.o -MD -MP -MF $(DEPDIR)/katana-write_to_dwarf.Tpo -c -o katana-write_to_dwarf.o `test -f 'patchwrite/write_to_dwarf.c' || echo '$(srcdir)/'`patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-write_to_dwarf.Tpo $(DEPDIR)/katana-write_to_dwarf.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/write_to_dwarf.c' object='katana-write_to_dwarf.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-write_to_dwarf.o `test -f 'patchwrite/write_to_dwarf.c' || echo '$(srcdir)/'`patchwrite/write_to_dwarf.c

katana-write_to_dwarf.obj: patchwrite/write_to_dwarf.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-write_to_dwarf.obj -MD -MP -MF $(DEPDIR)/katana-write_to_dwarf.Tpo -c -o katana-write_to_dwarf.obj `if test -f 'patchwrite/write_to_dwarf.c'; then $(CYGPATH_W) 'patchwrite/write_to_dwarf.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/write_to_dwarf.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-write_to_dwarf.Tpo $(DEPDIR)/katana-write_to_dwarf.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/write_to_dwarf.c' object='katana-write_to_dwarf.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-write_to_dwarf.obj `if test -f 'patchwrite/write_to_dwarf.c'; then $(CYGPATH_W) 'patchwrite/write_to_dwarf.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/write_to_dwarf.c'; fi`

katana-elfcmp.o: patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfcmp.o -MD -MP -MF $(DEPDIR)/katana-elfcmp.Tpo -c -o katana-elfcmp.o `test -f 'patchwrite/elfcmp.c' || echo '$(srcdir)/'`patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfcmp.Tpo $(DEPDIR)/katana-elfcmp.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfcmp.c' object='katana-elfcmp.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfcmp.o `test -f 'patchwrite/elfcmp.c' || echo '$(srcdir)/'`patchwrite/elfcmp.c

katana-elfcmp.obj: patchwrite/elfcmp.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-elfcmp.obj -MD -MP -MF $(DEPDIR)/katana-elfcmp.Tpo -c -o katana-elfcmp.obj `if test -f 'patchwrite/elfcmp.c'; then $(CYGPATH_W) 'patchwrite/elfcmp.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfcmp.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-elfcmp.Tpo $(DEPDIR)/katana-elfcmp.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patchwrite/elfcmp.c' object='katana-elfcmp.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-elfcmp.obj `if test -f 'patchwrite/elfcmp.c'; then $(CYGPATH_W) 'patchwrite/elfcmp.c'; else $(CYGPATH_W) '$(srcdir)/patchwrite/elfcmp.c'; fi`

katana-hotpatch.o: patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hotpatch.o -MD -MP -MF $(DEPDIR)/katana-hotpatch.Tpo -c -o katana-hotpatch.o `test -f 'patcher/hotpatch.c' || echo '$(srcdir)/'`patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hotpatch.Tpo $(DEPDIR)/katana-hotpatch.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/hotpatch.c' object='katana-hotpatch.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hotpatch.o `test -f 'patcher/hotpatch.c' || echo '$(srcdir)/'`patcher/hotpatch.c

katana-hotpatch.obj: patcher/hotpatch.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hotpatch.obj -MD -MP -MF $(DEPDIR)/katana-hotpatch.Tpo -c -o katana-hotpatch.obj `if test -f 'patcher/hotpatch.c'; then $(CYGPATH_W) 'patcher/hotpatch.c'; else $(CYGPATH_W) '$(srcdir)/patcher/hotpatch.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hotpatch.Tpo $(DEPDIR)/katana-hotpatch.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/hotpatch.c' object='katana-hotpatch.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hotpatch.obj `if test -f 'patcher/hotpatch.c'; then $(CYGPATH_W) 'patcher/hotpatch.c'; else $(CYGPATH_W) '$(srcdir)/patcher/hotpatch.c'; fi`

katana-target.o: patcher/target.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-target.o -MD -MP -MF $(DEPDIR)/katana-target.Tpo -c -o katana-target.o `test -f 'patcher/target.c' || echo '$(srcdir)/'`patcher/target.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-target.Tpo $(DEPDIR)/katana-target.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/target.c' object='katana-target.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-target.o `test -f 'patcher/target.c' || echo '$(srcdir)/'`patcher/target.c

katana-target.obj: patcher/target.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-target.obj -MD -MP -MF $(DEPDIR)/katana-target.Tpo -c -o katana-target.obj `if test -f 'patcher/target.c'; then $(CYGPATH_W) 'patcher/target.c'; else $(CYGPATH_W) '$(srcdir)/patcher/target.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-target.Tpo $(DEPDIR)/katana-target.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/target.c' object='katana-target.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-target.obj `if test -f 'patcher/target.c'; then $(CYGPATH_W) 'patcher/target.c'; else $(CYGPATH_W) '$(srcdir)/patcher/target.c'; fi`

katana-patchapply.o: patcher/patchapply.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchapply.o -MD -MP -MF $(DEPDIR)/katana-patchapply.Tpo -c -o katana-patchapply.o `test -f 'patcher/patchapply.c' || echo '$(srcdir)/'`patcher/patchapply.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchapply.Tpo $(DEPDIR)/katana-patchapply.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/patchapply.c' object='katana-patchapply.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchapply.o `test -f 'patcher/patchapply.c' || echo '$(srcdir)/'`patcher/patchapply.c

katana-patchapply.obj: patcher/patchapply.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-patchapply.obj -MD -MP -MF $(DEPDIR)/katana-patchapply.Tpo -c -o katana-patchapply.obj `if test -f 'patcher/patchapply.c'; then $(CYGPATH_W) 'patcher/patchapply.c'; else $(CYGPATH_W) '$(srcdir)/patcher/patchapply.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-patchapply.Tpo $(DEPDIR)/katana-patchapply.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/patchapply.c' object='katana-patchapply.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-patchapply.obj `if test -f 'patcher/patchapply.c'; then $(CYGPATH_W) 'patcher/patchapply.c'; else $(CYGPATH_W) '$(srcdir)/patcher/patchapply.c'; fi`

katana-versioning.o: patcher/versioning.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-versioning.o -MD -MP -MF $(DEPDIR)/katana-versioning.Tpo -c -o katana-versioning.o `test -f 'patcher/versioning.c' || echo '$(srcdir)/'`patcher/versioning.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-versioning.Tpo $(DEPDIR)/katana-versioning.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/versioning.c' object='katana-versioning.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-versioning.o `test -f 'patcher/versioning.c' || echo '$(srcdir)/'`patcher/versioning.c

katana-versioning.obj: patcher/versioning.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-versioning.obj -MD -MP -MF $(DEPDIR)/katana-versioning.Tpo -c -o katana-versioning.obj `if test -f 'patcher/versioning.c'; then $(CYGPATH_W) 'patcher/versioning.c'; else $(CYGPATH_W) '$(srcdir)/patcher/versioning.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-versioning.Tpo $(DEPDIR)/katana-versioning.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/versioning.c' object='katana-versioning.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-versioning.obj `if test -f 'patcher/versioning.c'; then $(CYGPATH_W) 'patcher/versioning.c'; else $(CYGPATH_W) '$(srcdir)/patcher/versioning.c'; fi`

katana-linkmap.o: patcher/linkmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-linkmap.o -MD -MP -MF $(DEPDIR)/katana-linkmap.Tpo -c -o katana-linkmap.o `test -f 'patcher/linkmap.c' || echo '$(srcdir)/'`patcher/linkmap.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-linkmap.Tpo $(DEPDIR)/katana-linkmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/linkmap.c' object='katana-linkmap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-linkmap.o `test -f 'patcher/linkmap.c' || echo '$(srcdir)/'`patcher/linkmap.c

katana-linkmap.obj: patcher/linkmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-linkmap.obj -MD -MP -MF $(DEPDIR)/katana-linkmap.Tpo -c -o katana-linkmap.obj `if test -f 'patcher/linkmap.c'; then $(CYGPATH_W) 'patcher/linkmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/linkmap.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-linkmap.Tpo $(DEPDIR)/katana-linkmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/linkmap.c' object='katana-linkmap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-linkmap.obj `if test -f 'patcher/linkmap.c'; then $(CYGPATH_W) 'patcher/linkmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/linkmap.c'; fi`

katana-safety.o: patcher/safety.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-safety.o -MD -MP -MF $(DEPDIR)/katana-safety.Tpo -c -o katana-safety.o `test -f 'patcher/safety.c' || echo '$(srcdir)/'`patcher/safety.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-safety.Tpo $(DEPDIR)/katana-safety.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/safety.c' object='katana-safety.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-safety.o `test -f 'patcher/safety.c' || echo '$(srcdir)/'`patcher/safety.c

katana-safety.obj: patcher/safety.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-safety.obj -MD -MP -MF $(DEPDIR)/katana-safety.Tpo -c -o katana-safety.obj `if test -f 'patcher/safety.c'; then $(CYGPATH_W) 'patcher/safety.c'; else $(CYGPATH_W) '$(srcdir)/patcher/safety.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-safety.Tpo $(DEPDIR)/katana-safety.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/safety.c' object='katana-safety.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-safety.obj `if test -f 'patcher/safety.c'; then $(CYGPATH_W) 'patcher/safety.c'; else $(CYGPATH_W) '$(srcdir)/patcher/safety.c'; fi`

katana-pmap.o: patcher/pmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-pmap.o -MD -MP -MF $(DEPDIR)/katana-pmap.Tpo -c -o katana-pmap.o `test -f 'patcher/pmap.c' || echo '$(srcdir)/'`patcher/pmap.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-pmap.Tpo $(DEPDIR)/katana-pmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/pmap.c' object='katana-pmap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-pmap.o `test -f 'patcher/pmap.c' || echo '$(srcdir)/'`patcher/pmap.c

katana-pmap.obj: patcher/pmap.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-pmap.obj -MD -MP -MF $(DEPDIR)/katana-pmap.Tpo -c -o katana-pmap.obj `if test -f 'patcher/pmap.c'; then $(CYGPATH_W) 'patcher/pmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/pmap.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-pmap.Tpo $(DEPDIR)/katana-pmap.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='patcher/pmap.c' object='katana-pmap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-pmap.obj `if test -f 'patcher/pmap.c'; then $(CYGPATH_W) 'patcher/pmap.c'; else $(CYGPATH_W) '$(srcdir)/patcher/pmap.c'; fi`

katana-dictionary.o: util/dictionary.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dictionary.o -MD -MP -MF $(DEPDIR)/katana-dictionary.Tpo -c -o katana-dictionary.o `test -f 'util/dictionary.c' || echo '$(srcdir)/'`util/dictionary.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dictionary.Tpo $(DEPDIR)/katana-dictionary.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/dictionary.c' object='katana-dictionary.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dictionary.o `test -f 'util/dictionary.c' || echo '$(srcdir)/'`util/dictionary.c

katana-dictionary.obj: util/dictionary.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dictionary.obj -MD -MP -MF $(DEPDIR)/katana-dictionary.Tpo -c -o katana-dictionary.obj `if test -f 'util/dictionary.c'; then $(CYGPATH_W) 'util/dictionary.c'; else $(CYGPATH_W) '$(srcdir)/util/dictionary.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dictionary.Tpo $(DEPDIR)/katana-dictionary.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/dictionary.c' object='katana-dictionary.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dictionary.obj `if test -f 'util/dictionary.c'; then $(CYGPATH_W) 'util/dictionary.c'; else $(CYGPATH_W) '$(srcdir)/util/dictionary.c'; fi`

katana-hash.o: util/hash.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hash.o -MD -MP -MF $(DEPDIR)/katana-hash.Tpo -c -o katana-hash.o `test -f 'util/hash.c' || echo '$(srcdir)/'`util/hash.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hash.Tpo $(DEPDIR)/katana-hash.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/hash.c' object='katana-hash.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hash.o `test -f 'util/hash.c' || echo '$(srcdir)/'`util/hash.c

katana-hash.obj: util/hash.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-hash.obj -MD -MP -MF $(DEPDIR)/katana-hash.Tpo -c -o katana-hash.obj `if test -f 'util/hash.c'; then $(CYGPATH_W) 'util/hash.c'; else $(CYGPATH_W) '$(srcdir)/util/hash.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-hash.Tpo $(DEPDIR)/katana-hash.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/hash.c' object='katana-hash.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-hash.obj `if test -f 'util/hash.c'; then $(CYGPATH_W) 'util/hash.c'; else $(CYGPATH_W) '$(srcdir)/util/hash.c'; fi`

katana-util.o: util/util.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-util.o -MD -MP -MF $(DEPDIR)/katana-util.Tpo -c -o katana-util.o `test -f 'util/util.c' || echo '$(srcdir)/'`util/util.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-util.Tpo $(DEPDIR)/katana-util.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/util.c' object='katana-util.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-util.o `test -f 'util/util.c' || echo '$(srcdir)/'`util/util.c

katana-util.obj: util/util.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-util.obj -MD -MP -MF $(DEPDIR)/katana-util.Tpo -c -o katana-util.obj `if test -f 'util/util.c'; then $(CYGPATH_W) 'util/util.c'; else $(CYGPATH_W) '$(srcdir)/util/util.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-util.Tpo $(DEPDIR)/katana-util.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/util.c' object='katana-util.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-util.obj `if test -f 'util/util.c'; then $(CYGPATH_W) 'util/util.c'; else $(CYGPATH_W) '$(srcdir)/util/util.c'; fi`

katana-map.o: util/map.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-map.o -MD -MP -MF $(DEPDIR)/katana-map.Tpo -c -o katana-map.o `test -f 'util/map.c' || echo '$(srcdir)/'`util/map.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-map.Tpo $(DEPDIR)/katana-map.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/map.c' object='katana-map.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-map.o `test -f 'util/map.c' || echo '$(srcdir)/'`util/map.c

katana-map.obj: util/map.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-map.obj -MD -MP -MF $(DEPDIR)/katana-map.Tpo -c -o katana-map.obj `if test -f 'util/map.c'; then $(CYGPATH_W) 'util/map.c'; else $(CYGPATH_W) '$(srcdir)/util/map.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-map.Tpo $(DEPDIR)/katana-map.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/map.c' object='katana-map.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-map.obj `if test -f 'util/map.c'; then $(CYGPATH_W) 'util/map.c'; else $(CYGPATH_W) '$(srcdir)/util/map.c'; fi`

katana-list.o: util/list.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-list.o -MD -MP -MF $(DEPDIR)/katana-list.Tpo -c -o katana-list.o `test -f 'util/list.c' || echo '$(srcdir)/'`util/list.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-list.Tpo $(DEPDIR)/katana-list.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/list.c' object='katana-list.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-list.o `test -f 'util/list.c' || echo '$(srcdir)/'`util/list.c

katana-list.obj: util/list.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-list.obj -MD -MP -MF $(DEPDIR)/katana-list.Tpo -c -o katana-list.obj `if test -f 'util/list.c'; then $(CYGPATH_W) 'util/list.c'; else $(CYGPATH_W) '$(srcdir)/util/list.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-list.Tpo $(DEPDIR)/katana-list.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/list.c' object='katana-list.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-list.obj `if test -f 'util/list.c'; then $(CYGPATH_W) 'util/list.c'; else $(CYGPATH_W) '$(srcdir)/util/list.c'; fi`

katana-logging.o: util/logging.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-logging.o -MD -MP -MF $(DEPDIR)/katana-logging.Tpo -c -o katana-logging.o `test -f 'util/logging.c' || echo '$(srcdir)/'`util/logging.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-logging.Tpo $(DEPDIR)/katana-logging.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/logging.c' object='katana-logging.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-logging.o `test -f 'util/logging.c' || echo '$(srcdir)/'`util/logging.c

katana-logging.obj: util/logging.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-logging.obj -MD -MP -MF $(DEPDIR)/katana-logging.Tpo -c -o katana-logging.obj `if test -f 'util/logging.c'; then $(CYGPATH_W) 'util/logging.c'; else $(CYGPATH_W) '$(srcdir)/util/logging.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-logging.Tpo $(DEPDIR)/katana-logging.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/logging.c' object='katana-logging.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-logging.obj `if test -f 'util/logging.c'; then $(CYGPATH_W) 'util/logging.c'; else $(CYGPATH_W) '$(srcdir)/util/logging.c'; fi`

katana-path.o: util/path.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-path.o -MD -MP -MF $(DEPDIR)/katana-path.Tpo -c -o katana-path.o `test -f 'util/path.c' || echo '$(srcdir)/'`util/path.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-path.Tpo $(DEPDIR)/katana-path.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/path.c' object='katana-path.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-path.o `test -f 'util/path.c' || echo '$(srcdir)/'`util/path.c

katana-path.obj: util/path.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-path.obj -MD -MP -MF $(DEPDIR)/katana-path.Tpo -c -o katana-path.obj `if test -f 'util/path.c'; then $(CYGPATH_W) 'util/path.c'; else $(CYGPATH_W) '$(srcdir)/util/path.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-path.Tpo $(DEPDIR)/katana-path.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/path.c' object='katana-path.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-path.obj `if test -f 'util/path.c'; then $(CYGPATH_W) 'util/path.c'; else $(CYGPATH_W) '$(srcdir)/util/path.c'; fi`

katana-refcounted.o: util/refcounted.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-refcounted.o -MD -MP -MF $(DEPDIR)/katana-refcounted.Tpo -c -o katana-refcounted.o `test -f 'util/refcounted.c' || echo '$(srcdir)/'`util/refcounted.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-refcounted.Tpo $(DEPDIR)/katana-refcounted.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/refcounted.c' object='katana-refcounted.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-refcounted.o `test -f 'util/refcounted.c' || echo '$(srcdir)/'`util/refcounted.c

katana-refcounted.obj: util/refcounted.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-refcounted.obj -MD -MP -MF $(DEPDIR)/katana-refcounted.Tpo -c -o katana-refcounted.obj `if test -f 'util/refcounted.c'; then $(CYGPATH_W) 'util/refcounted.c'; else $(CYGPATH_W) '$(srcdir)/util/refcounted.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-refcounted.Tpo $(DEPDIR)/katana-refcounted.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/refcounted.c' object='katana-refcounted.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-refcounted.obj `if test -f 'util/refcounted.c'; then $(CYGPATH_W) 'util/refcounted.c'; else $(CYGPATH_W) '$(srcdir)/util/refcounted.c'; fi`

katana-stack.o: util/stack.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-stack.o -MD -MP -MF $(DEPDIR)/katana-stack.Tpo -c -o katana-stack.o `test -f 'util/stack.c' || echo '$(srcdir)/'`util/stack.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-stack.Tpo $(DEPDIR)/katana-stack.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/stack.c' object='katana-stack.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-stack.o `test -f 'util/stack.c' || echo '$(srcdir)/'`util/stack.c

katana-stack.obj: util/stack.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-stack.obj -MD -MP -MF $(DEPDIR)/katana-stack.Tpo -c -o katana-stack.obj `if test -f 'util/stack.c'; then $(CYGPATH_W) 'util/stack.c'; else $(CYGPATH_W) '$(srcdir)/util/stack.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-stack.Tpo $(DEPDIR)/katana-stack.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/stack.c' object='katana-stack.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-stack.obj `if test -f 'util/stack.c'; then $(CYGPATH_W) 'util/stack.c'; else $(CYGPATH_W) '$(srcdir)/util/stack.c'; fi`

katana-growingBuffer.o: util/growingBuffer.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-growingBuffer.o -MD -MP -MF $(DEPDIR)/katana-growingBuffer.Tpo -c -o katana-growingBuffer.o `test -f 'util/growingBuffer.c' || echo '$(srcdir)/'`util/growingBuffer.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-growingBuffer.Tpo $(DEPDIR)/katana-growingBuffer.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/growingBuffer.c' object='katana-growingBuffer.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-growingBuffer.o `test -f 'util/growingBuffer.c' || echo '$(srcdir)/'`util/growingBuffer.c

katana-growingBuffer.obj: util/growingBuffer.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-growingBuffer.obj -MD -MP -MF $(DEPDIR)/katana-growingBuffer.Tpo -c -o katana-growingBuffer.obj `if test -f 'util/growingBuffer.c'; then $(CYGPATH_W) 'util/growingBuffer.c'; else $(CYGPATH_W) '$(srcdir)/util/growingBuffer.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-growingBuffer.Tpo $(DEPDIR)/katana-growingBuffer.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/growingBuffer.c' object='katana-growingBuffer.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-growingBuffer.obj `if test -f 'util/growingBuffer.c'; then $(CYGPATH_W) 'util/growingBuffer.c'; else $(CYGPATH_W) '$(srcdir)/util/growingBuffer.c'; fi`

katana-file.o: util/file.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-file.o -MD -MP -MF $(DEPDIR)/katana-file.Tpo -c -o katana-file.o `test -f 'util/file.c' || echo '$(srcdir)/'`util/file.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-file.Tpo $(DEPDIR)/katana-file.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/file.c' object='katana-file.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-file.o `test -f 'util/file.c' || echo '$(srcdir)/'`util/file.c

katana-file.obj: util/file.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-file.obj -MD -MP -MF $(DEPDIR)/katana-file.Tpo -c -o katana-file.obj `if test -f 'util/file.c'; then $(CYGPATH_W) 'util/file.c'; else $(CYGPATH_W) '$(srcdir)/util/file.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-file.Tpo $(DEPDIR)/katana-file.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='util/file.c' object='katana-file.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-file.obj `if test -f 'util/file.c'; then $(CYGPATH_W) 'util/file.c'; else $(CYGPATH_W) '$(srcdir)/util/file.c'; fi`

katana-fdedump.o: info/fdedump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fdedump.o -MD -MP -MF $(DEPDIR)/katana-fdedump.Tpo -c -o katana-fdedump.o `test -f 'info/fdedump.c' || echo '$(srcdir)/'`info/fdedump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fdedump.Tpo $(DEPDIR)/katana-fdedump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/fdedump.c' object='katana-fdedump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fdedump.o `test -f 'info/fdedump.c' || echo '$(srcdir)/'`info/fdedump.c

katana-fdedump.obj: info/fdedump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-fdedump.obj -MD -MP -MF $(DEPDIR)/katana-fdedump.Tpo -c -o katana-fdedump.obj `if test -f 'info/fdedump.c'; then $(CYGPATH_W) 'info/fdedump.c'; else $(CYGPATH_W) '$(srcdir)/info/fdedump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-fdedump.Tpo $(DEPDIR)/katana-fdedump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/fdedump.c' object='katana-fdedump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-fdedump.obj `if test -f 'info/fdedump.c'; then $(CYGPATH_W) 'info/fdedump.c'; else $(CYGPATH_W) '$(srcdir)/info/fdedump.c'; fi`

katana-dwinfo_dump.o: info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwinfo_dump.o -MD -MP -MF $(DEPDIR)/katana-dwinfo_dump.Tpo -c -o katana-dwinfo_dump.o `test -f 'info/dwinfo_dump.c' || echo '$(srcdir)/'`info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwinfo_dump.Tpo $(DEPDIR)/katana-dwinfo_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/dwinfo_dump.c' object='katana-dwinfo_dump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwinfo_dump.o `test -f 'info/dwinfo_dump.c' || echo '$(srcdir)/'`info/dwinfo_dump.c

katana-dwinfo_dump.obj: info/dwinfo_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwinfo_dump.obj -MD -MP -MF $(DEPDIR)/katana-dwinfo_dump.Tpo -c -o katana-dwinfo_dump.obj `if test -f 'info/dwinfo_dump.c'; then $(CYGPATH_W) 'info/dwinfo_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/dwinfo_dump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwinfo_dump.Tpo $(DEPDIR)/katana-dwinfo_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/dwinfo_dump.c' object='katana-dwinfo_dump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwinfo_dump.obj `if test -f 'info/dwinfo_dump.c'; then $(CYGPATH_W) 'info/dwinfo_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/dwinfo_dump.c'; fi`

katana-unsafe_funcs_dump.o: info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-unsafe_funcs_dump.o -MD -MP -MF $(DEPDIR)/katana-unsafe_funcs_dump.Tpo -c -o katana-unsafe_funcs_dump.o `test -f 'info/unsafe_funcs_dump.c' || echo '$(srcdir)/'`info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-unsafe_funcs_dump.Tpo $(DEPDIR)/katana-unsafe_funcs_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/unsafe_funcs_dump.c' object='katana-unsafe_funcs_dump.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-unsafe_funcs_dump.o `test -f 'info/unsafe_funcs_dump.c' || echo '$(srcdir)/'`info/unsafe_funcs_dump.c

katana-unsafe_funcs_dump.obj: info/unsafe_funcs_dump.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-unsafe_funcs_dump.obj -MD -MP -MF $(DEPDIR)/katana-unsafe_funcs_dump.Tpo -c -o katana-unsafe_funcs_dump.obj `if test -f 'info/unsafe_funcs_dump.c'; then $(CYGPATH_W) 'info/unsafe_funcs_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/unsafe_funcs_dump.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-unsafe_funcs_dump.Tpo $(DEPDIR)/katana-unsafe_funcs_dump.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='info/unsafe_funcs_dump.c' object='katana-unsafe_funcs_dump.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-unsafe_funcs_dump.obj `if test -f 'info/unsafe_funcs_dump.c'; then $(CYGPATH_W) 'info/unsafe_funcs_dump.c'; else $(CYGPATH_W) '$(srcdir)/info/unsafe_funcs_dump.c'; fi`

katana-rewrite.o: rewriter/rewrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-rewrite.o -MD -MP -MF $(DEPDIR)/katana-rewrite.Tpo -c -o katana-rewrite.o `test -f 'rewriter/rewrite.c' || echo '$(srcdir)/'`rewriter/rewrite.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-rewrite.Tpo $(DEPDIR)/katana-rewrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='rewriter/rewrite.c' object='katana-rewrite.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-rewrite.o `test -f 'rewriter/rewrite.c' || echo '$(srcdir)/'`rewriter/rewrite.c

katana-rewrite.obj: rewriter/rewrite.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-rewrite.obj -MD -MP -MF $(DEPDIR)/katana-rewrite.Tpo -c -o katana-rewrite.obj `if test -f 'rewriter/rewrite.c'; then $(CYGPATH_W) 'rewriter/rewrite.c'; else $(CYGPATH_W) '$(srcdir)/rewriter/rewrite.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-rewrite.Tpo $(DEPDIR)/katana-rewrite.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='rewriter/rewrite.c' object='katana-rewrite.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-rewrite.obj `if test -f 'rewriter/rewrite.c'; then $(CYGPATH_W) 'rewriter/rewrite.c'; else $(CYGPATH_W) '$(srcdir)/rewriter/rewrite.c'; fi`

katana-dwarfscript.yy.o: shell/dwarfscript/dwarfscript.yy.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfscript.yy.o -MD -MP -MF $(DEPDIR)/katana-dwarfscript.yy.Tpo -c -o katana-dwarfscript.yy.o `test -f 'shell/dwarfscript/dwarfscript.yy.c' || echo '$(srcdir)/'`shell/dwarfscript/dwarfscript.yy.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscript.yy.Tpo $(DEPDIR)/katana-dwarfscript.yy.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='shell/dwarfscript/dwarfscript.yy.c' object='katana-dwarfscript.yy.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfscript.yy.o `test -f 'shell/dwarfscript/dwarfscript.yy.c' || echo '$(srcdir)/'`shell/dwarfscript/dwarfscript.yy.c

katana-dwarfscript.yy.obj: shell/dwarfscript/dwarfscript.yy.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfscript.yy.obj -MD -MP -MF $(DEPDIR)/katana-dwarfscript.yy.Tpo -c -o katana-dwarfscript.yy.obj `if test -f 'shell/dwarfscript/dwarfscript.yy.c'; then $(CYGPATH_W) 'shell/dwarfscript/dwarfscript.yy.c'; else $(CYGPATH_W) '$(srcdir)/shell/dwarfscript/dwarfscript.yy.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscript.yy.Tpo $(DEPDIR)/katana-dwarfscript.yy.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='shell/dwarfscript/dwarfscript.yy.c' object='katana-dwarfscript.yy.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfscript.yy.obj `if test -f 'shell/dwarfscript/dwarfscript.yy.c'; then $(CYGPATH_W) 'shell/dwarfscript/dwarfscript.yy.c'; else $(CYGPATH_W) '$(srcdir)/shell/dwarfscript/dwarfscript.yy.c'; fi`

katana-dwarfscript.tab.o: shell/dwarfscript/dwarfscript.tab.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfscript.tab.o -MD -MP -MF $(DEPDIR)/katana-dwarfscript.tab.Tpo -c -o katana-dwarfscript.tab.o `test -f 'shell/dwarfscript/dwarfscript.tab.c' || echo '$(srcdir)/'`shell/dwarfscript/dwarfscript.tab.c
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscript.tab.Tpo $(DEPDIR)/katana-dwarfscript.tab.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='shell/dwarfscript/dwarfscript.tab.c' object='katana-dwarfscript.tab.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfscript.tab.o `test -f 'shell/dwarfscript/dwarfscript.tab.c' || echo '$(srcdir)/'`shell/dwarfscript/dwarfscript.tab.c

katana-dwarfscript.tab.obj: shell/dwarfscript/dwarfscript.tab.c
@am__fastdepCC_TRUE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -MT katana-dwarfscript.tab.obj -MD -MP -MF $(DEPDIR)/katana-dwarfscript.tab.Tpo -c -o katana-dwarfscript.tab.obj `if test -f 'shell/dwarfscript/dwarfscript.tab.c'; then $(CYGPATH_W) 'shell/dwarfscript/dwarfscript.tab.c'; else $(CYGPATH_W) '$(srcdir)/shell/dwarfscript/dwarfscript.tab.c'; fi`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscript.tab.Tpo $(DEPDIR)/katana-dwarfscript.tab.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='shell/dwarfscript/dwarfscript.tab.c' object='katana-dwarfscript.tab.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(katana_CFLAGS) $(CFLAGS) -c -o katana-dwarfscript.tab.obj `if test -f 'shell/dwarfscript/dwarfscript.tab.c'; then $(CYGPATH_W) 'shell/dwarfscript/dwarfscript.tab.c'; else $(CYGPATH_W) '$(srcdir)/shell/dwarfscript/dwarfscript.tab.c'; fi`

.cpp.o:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

katana-cxxutil.o: util/cxxutil.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-cxxutil.o -MD -MP -MF $(DEPDIR)/katana-cxxutil.Tpo -c -o katana-cxxutil.o `test -f 'util/cxxutil.cpp' || echo '$(srcdir)/'`util/cxxutil.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-cxxutil.Tpo $(DEPDIR)/katana-cxxutil.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='util/cxxutil.cpp' object='katana-cxxutil.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-cxxutil.o `test -f 'util/cxxutil.cpp' || echo '$(srcdir)/'`util/cxxutil.cpp

katana-cxxutil.obj: util/cxxutil.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-cxxutil.obj -MD -MP -MF $(DEPDIR)/katana-cxxutil.Tpo -c -o katana-cxxutil.obj `if test -f 'util/cxxutil.cpp'; then $(CYGPATH_W) 'util/cxxutil.cpp'; else $(CYGPATH_W) '$(srcdir)/util/cxxutil.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-cxxutil.Tpo $(DEPDIR)/katana-cxxutil.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='util/cxxutil.cpp' object='katana-cxxutil.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-cxxutil.obj `if test -f 'util/cxxutil.cpp'; then $(CYGPATH_W) 'util/cxxutil.cpp'; else $(CYGPATH_W) '$(srcdir)/util/cxxutil.cpp'; fi`

katana-shell.o: shell/shell.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.o -MD -MP -MF $(DEPDIR)/katana-shell.Tpo -c -o katana-shell.o `test -f 'shell/shell.cpp' || echo '$(srcdir)/'`shell/shell.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.Tpo $(DEPDIR)/katana-shell.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.cpp' object='katana-shell.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.o `test -f 'shell/shell.cpp' || echo '$(srcdir)/'`shell/shell.cpp

katana-shell.obj: shell/shell.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.obj -MD -MP -MF $(DEPDIR)/katana-shell.Tpo -c -o katana-shell.obj `if test -f 'shell/shell.cpp'; then $(CYGPATH_W) 'shell/shell.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.Tpo $(DEPDIR)/katana-shell.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.cpp' object='katana-shell.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.obj `if test -f 'shell/shell.cpp'; then $(CYGPATH_W) 'shell/shell.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.cpp'; fi`

katana-shell.yy.o: shell/shell.yy.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.yy.o -MD -MP -MF $(DEPDIR)/katana-shell.yy.Tpo -c -o katana-shell.yy.o `test -f 'shell/shell.yy.cpp' || echo '$(srcdir)/'`shell/shell.yy.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.yy.Tpo $(DEPDIR)/katana-shell.yy.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.yy.cpp' object='katana-shell.yy.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.yy.o `test -f 'shell/shell.yy.cpp' || echo '$(srcdir)/'`shell/shell.yy.cpp

katana-shell.yy.obj: shell/shell.yy.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.yy.obj -MD -MP -MF $(DEPDIR)/katana-shell.yy.Tpo -c -o katana-shell.yy.obj `if test -f 'shell/shell.yy.cpp'; then $(CYGPATH_W) 'shell/shell.yy.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.yy.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.yy.Tpo $(DEPDIR)/katana-shell.yy.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.yy.cpp' object='katana-shell.yy.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.yy.obj `if test -f 'shell/shell.yy.cpp'; then $(CYGPATH_W) 'shell/shell.yy.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.yy.cpp'; fi`

katana-shell.tab.o: shell/shell.tab.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.tab.o -MD -MP -MF $(DEPDIR)/katana-shell.tab.Tpo -c -o katana-shell.tab.o `test -f 'shell/shell.tab.cpp' || echo '$(srcdir)/'`shell/shell.tab.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.tab.Tpo $(DEPDIR)/katana-shell.tab.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.tab.cpp' object='katana-shell.tab.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.tab.o `test -f 'shell/shell.tab.cpp' || echo '$(srcdir)/'`shell/shell.tab.cpp

katana-shell.tab.obj: shell/shell.tab.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shell.tab.obj -MD -MP -MF $(DEPDIR)/katana-shell.tab.Tpo -c -o katana-shell.tab.obj `if test -f 'shell/shell.tab.cpp'; then $(CYGPATH_W) 'shell/shell.tab.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.tab.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shell.tab.Tpo $(DEPDIR)/katana-shell.tab.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/shell.tab.cpp' object='katana-shell.tab.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shell.tab.obj `if test -f 'shell/shell.tab.cpp'; then $(CYGPATH_W) 'shell/shell.tab.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/shell.tab.cpp'; fi`

katana-param.o: shell/param.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-param.o -MD -MP -MF $(DEPDIR)/katana-param.Tpo -c -o katana-param.o `test -f 'shell/param.cpp' || echo '$(srcdir)/'`shell/param.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-param.Tpo $(DEPDIR)/katana-param.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/param.cpp' object='katana-param.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-param.o `test -f 'shell/param.cpp' || echo '$(srcdir)/'`shell/param.cpp

katana-param.obj: shell/param.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-param.obj -MD -MP -MF $(DEPDIR)/katana-param.Tpo -c -o katana-param.obj `if test -f 'shell/param.cpp'; then $(CYGPATH_W) 'shell/param.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/param.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-param.Tpo $(DEPDIR)/katana-param.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/param.cpp' object='katana-param.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-param.obj `if test -f 'shell/param.cpp'; then $(CYGPATH_W) 'shell/param.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/param.cpp'; fi`

katana-variable.o: shell/variable.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-variable.o -MD -MP -MF $(DEPDIR)/katana-variable.Tpo -c -o katana-variable.o `test -f 'shell/variable.cpp' || echo '$(srcdir)/'`shell/variable.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-variable.Tpo $(DEPDIR)/katana-variable.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variable.cpp' object='katana-variable.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-variable.o `test -f 'shell/variable.cpp' || echo '$(srcdir)/'`shell/variable.cpp

katana-variable.obj: shell/variable.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-variable.obj -MD -MP -MF $(DEPDIR)/katana-variable.Tpo -c -o katana-variable.obj `if test -f 'shell/variable.cpp'; then $(CYGPATH_W) 'shell/variable.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variable.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-variable.Tpo $(DEPDIR)/katana-variable.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variable.cpp' object='katana-variable.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-variable.obj `if test -f 'shell/variable.cpp'; then $(CYGPATH_W) 'shell/variable.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variable.cpp'; fi`

katana-arrayAccessParam.o: shell/arrayAccessParam.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-arrayAccessParam.o -MD -MP -MF $(DEPDIR)/katana-arrayAccessParam.Tpo -c -o katana-arrayAccessParam.o `test -f 'shell/arrayAccessParam.cpp' || echo '$(srcdir)/'`shell/arrayAccessParam.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-arrayAccessParam.Tpo $(DEPDIR)/katana-arrayAccessParam.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/arrayAccessParam.cpp' object='katana-arrayAccessParam.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-arrayAccessParam.o `test -f 'shell/arrayAccessParam.cpp' || echo '$(srcdir)/'`shell/arrayAccessParam.cpp

katana-arrayAccessParam.obj: shell/arrayAccessParam.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-arrayAccessParam.obj -MD -MP -MF $(DEPDIR)/katana-arrayAccessParam.Tpo -c -o katana-arrayAccessParam.obj `if test -f 'shell/arrayAccessParam.cpp'; then $(CYGPATH_W) 'shell/arrayAccessParam.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/arrayAccessParam.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-arrayAccessParam.Tpo $(DEPDIR)/katana-arrayAccessParam.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/arrayAccessParam.cpp' object='katana-arrayAccessParam.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-arrayAccessParam.obj `if test -f 'shell/arrayAccessParam.cpp'; then $(CYGPATH_W) 'shell/arrayAccessParam.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/arrayAccessParam.cpp'; fi`

katana-command.o: shell/commands/command.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-command.o -MD -MP -MF $(DEPDIR)/katana-command.Tpo -c -o katana-command.o `test -f 'shell/commands/command.cpp' || echo '$(srcdir)/'`shell/commands/command.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-command.Tpo $(DEPDIR)/katana-command.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/command.cpp' object='katana-command.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-command.o `test -f 'shell/commands/command.cpp' || echo '$(srcdir)/'`shell/commands/command.cpp

katana-command.obj: shell/commands/command.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-command.obj -MD -MP -MF $(DEPDIR)/katana-command.Tpo -c -o katana-command.obj `if test -f 'shell/commands/command.cpp'; then $(CYGPATH_W) 'shell/commands/command.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/command.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-command.Tpo $(DEPDIR)/katana-command.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/command.cpp' object='katana-command.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-command.obj `if test -f 'shell/commands/command.cpp'; then $(CYGPATH_W) 'shell/commands/command.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/command.cpp'; fi`

katana-loadCommand.o: shell/commands/loadCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-loadCommand.o -MD -MP -MF $(DEPDIR)/katana-loadCommand.Tpo -c -o katana-loadCommand.o `test -f 'shell/commands/loadCommand.cpp' || echo '$(srcdir)/'`shell/commands/loadCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-loadCommand.Tpo $(DEPDIR)/katana-loadCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/loadCommand.cpp' object='katana-loadCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-loadCommand.o `test -f 'shell/commands/loadCommand.cpp' || echo '$(srcdir)/'`shell/commands/loadCommand.cpp

katana-loadCommand.obj: shell/commands/loadCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-loadCommand.obj -MD -MP -MF $(DEPDIR)/katana-loadCommand.Tpo -c -o katana-loadCommand.obj `if test -f 'shell/commands/loadCommand.cpp'; then $(CYGPATH_W) 'shell/commands/loadCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/loadCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-loadCommand.Tpo $(DEPDIR)/katana-loadCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/loadCommand.cpp' object='katana-loadCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-loadCommand.obj `if test -f 'shell/commands/loadCommand.cpp'; then $(CYGPATH_W) 'shell/commands/loadCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/loadCommand.cpp'; fi`

katana-saveCommand.o: shell/commands/saveCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-saveCommand.o -MD -MP -MF $(DEPDIR)/katana-saveCommand.Tpo -c -o katana-saveCommand.o `test -f 'shell/commands/saveCommand.cpp' || echo '$(srcdir)/'`shell/commands/saveCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-saveCommand.Tpo $(DEPDIR)/katana-saveCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/saveCommand.cpp' object='katana-saveCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-saveCommand.o `test -f 'shell/commands/saveCommand.cpp' || echo '$(srcdir)/'`shell/commands/saveCommand.cpp

katana-saveCommand.obj: shell/commands/saveCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-saveCommand.obj -MD -MP -MF $(DEPDIR)/katana-saveCommand.Tpo -c -o katana-saveCommand.obj `if test -f 'shell/commands/saveCommand.cpp'; then $(CYGPATH_W) 'shell/commands/saveCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/saveCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-saveCommand.Tpo $(DEPDIR)/katana-saveCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/saveCommand.cpp' object='katana-saveCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-saveCommand.obj `if test -f 'shell/commands/saveCommand.cpp'; then $(CYGPATH_W) 'shell/commands/saveCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/saveCommand.cpp'; fi`

katana-replaceCommand.o: shell/commands/replaceCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-replaceCommand.o -MD -MP -MF $(DEPDIR)/katana-replaceCommand.Tpo -c -o katana-replaceCommand.o `test -f 'shell/commands/replaceCommand.cpp' || echo '$(srcdir)/'`shell/commands/replaceCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-replaceCommand.Tpo $(DEPDIR)/katana-replaceCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/replaceCommand.cpp' object='katana-replaceCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-replaceCommand.o `test -f 'shell/commands/replaceCommand.cpp' || echo '$(srcdir)/'`shell/commands/replaceCommand.cpp

katana-replaceCommand.obj: shell/commands/replaceCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-replaceCommand.obj -MD -MP -MF $(DEPDIR)/katana-replaceCommand.Tpo -c -o katana-replaceCommand.obj `if test -f 'shell/commands/replaceCommand.cpp'; then $(CYGPATH_W) 'shell/commands/replaceCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/replaceCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-replaceCommand.Tpo $(DEPDIR)/katana-replaceCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/replaceCommand.cpp' object='katana-replaceCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-replaceCommand.obj `if test -f 'shell/commands/replaceCommand.cpp'; then $(CYGPATH_W) 'shell/commands/replaceCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/replaceCommand.cpp'; fi`

katana-dwarfscriptCommand.o: shell/commands/dwarfscriptCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-dwarfscriptCommand.o -MD -MP -MF $(DEPDIR)/katana-dwarfscriptCommand.Tpo -c -o katana-dwarfscriptCommand.o `test -f 'shell/commands/dwarfscriptCommand.cpp' || echo '$(srcdir)/'`shell/commands/dwarfscriptCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscriptCommand.Tpo $(DEPDIR)/katana-dwarfscriptCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/dwarfscriptCommand.cpp' object='katana-dwarfscriptCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-dwarfscriptCommand.o `test -f 'shell/commands/dwarfscriptCommand.cpp' || echo '$(srcdir)/'`shell/commands/dwarfscriptCommand.cpp

katana-dwarfscriptCommand.obj: shell/commands/dwarfscriptCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-dwarfscriptCommand.obj -MD -MP -MF $(DEPDIR)/katana-dwarfscriptCommand.Tpo -c -o katana-dwarfscriptCommand.obj `if test -f 'shell/commands/dwarfscriptCommand.cpp'; then $(CYGPATH_W) 'shell/commands/dwarfscriptCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/dwarfscriptCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-dwarfscriptCommand.Tpo $(DEPDIR)/katana-dwarfscriptCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/dwarfscriptCommand.cpp' object='katana-dwarfscriptCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-dwarfscriptCommand.obj `if test -f 'shell/commands/dwarfscriptCommand.cpp'; then $(CYGPATH_W) 'shell/commands/dwarfscriptCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/dwarfscriptCommand.cpp'; fi`

katana-shellCommand.o: shell/commands/shellCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shellCommand.o -MD -MP -MF $(DEPDIR)/katana-shellCommand.Tpo -c -o katana-shellCommand.o `test -f 'shell/commands/shellCommand.cpp' || echo '$(srcdir)/'`shell/commands/shellCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shellCommand.Tpo $(DEPDIR)/katana-shellCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/shellCommand.cpp' object='katana-shellCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shellCommand.o `test -f 'shell/commands/shellCommand.cpp' || echo '$(srcdir)/'`shell/commands/shellCommand.cpp

katana-shellCommand.obj: shell/commands/shellCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-shellCommand.obj -MD -MP -MF $(DEPDIR)/katana-shellCommand.Tpo -c -o katana-shellCommand.obj `if test -f 'shell/commands/shellCommand.cpp'; then $(CYGPATH_W) 'shell/commands/shellCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/shellCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-shellCommand.Tpo $(DEPDIR)/katana-shellCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/shellCommand.cpp' object='katana-shellCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-shellCommand.obj `if test -f 'shell/commands/shellCommand.cpp'; then $(CYGPATH_W) 'shell/commands/shellCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/shellCommand.cpp'; fi`

katana-infoCommand.o: shell/commands/infoCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-infoCommand.o -MD -MP -MF $(DEPDIR)/katana-infoCommand.Tpo -c -o katana-infoCommand.o `test -f 'shell/commands/infoCommand.cpp' || echo '$(srcdir)/'`shell/commands/infoCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-infoCommand.Tpo $(DEPDIR)/katana-infoCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/infoCommand.cpp' object='katana-infoCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-infoCommand.o `test -f 'shell/commands/infoCommand.cpp' || echo '$(srcdir)/'`shell/commands/infoCommand.cpp

katana-infoCommand.obj: shell/commands/infoCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-infoCommand.obj -MD -MP -MF $(DEPDIR)/katana-infoCommand.Tpo -c -o katana-infoCommand.obj `if test -f 'shell/commands/infoCommand.cpp'; then $(CYGPATH_W) 'shell/commands/infoCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/infoCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-infoCommand.Tpo $(DEPDIR)/katana-infoCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/infoCommand.cpp' object='katana-infoCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-infoCommand.obj `if test -f 'shell/commands/infoCommand.cpp'; then $(CYGPATH_W) 'shell/commands/infoCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/infoCommand.cpp'; fi`

katana-hashCommand.o: shell/commands/hashCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-hashCommand.o -MD -MP -MF $(DEPDIR)/katana-hashCommand.Tpo -c -o katana-hashCommand.o `test -f 'shell/commands/hashCommand.cpp' || echo '$(srcdir)/'`shell/commands/hashCommand.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-hashCommand.Tpo $(DEPDIR)/katana-hashCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/hashCommand.cpp' object='katana-hashCommand.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-hashCommand.o `test -f 'shell/commands/hashCommand.cpp' || echo '$(srcdir)/'`shell/commands/hashCommand.cpp

katana-hashCommand.obj: shell/commands/hashCommand.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-hashCommand.obj -MD -MP -MF $(DEPDIR)/katana-hashCommand.Tpo -c -o katana-hashCommand.obj `if test -f 'shell/commands/hashCommand.cpp'; then $(CYGPATH_W) 'shell/commands/hashCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/hashCommand.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-hashCommand.Tpo $(DEPDIR)/katana-hashCommand.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/commands/hashCommand.cpp' object='katana-hashCommand.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-hashCommand.obj `if test -f 'shell/commands/hashCommand.cpp'; then $(CYGPATH_W) 'shell/commands/hashCommand.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/commands/hashCommand.cpp'; fi`

katana-elfVariableData.o: shell/variableTypes/elfVariableData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-elfVariableData.o -MD -MP -MF $(DEPDIR)/katana-elfVariableData.Tpo -c -o katana-elfVariableData.o `test -f 'shell/variableTypes/elfVariableData.cpp' || echo '$(srcdir)/'`shell/variableTypes/elfVariableData.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-elfVariableData.Tpo $(DEPDIR)/katana-elfVariableData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/elfVariableData.cpp' object='katana-elfVariableData.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-elfVariableData.o `test -f 'shell/variableTypes/elfVariableData.cpp' || echo '$(srcdir)/'`shell/variableTypes/elfVariableData.cpp

katana-elfVariableData.obj: shell/variableTypes/elfVariableData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-elfVariableData.obj -MD -MP -MF $(DEPDIR)/katana-elfVariableData.Tpo -c -o katana-elfVariableData.obj `if test -f 'shell/variableTypes/elfVariableData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/elfVariableData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/elfVariableData.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-elfVariableData.Tpo $(DEPDIR)/katana-elfVariableData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/elfVariableData.cpp' object='katana-elfVariableData.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-elfVariableData.obj `if test -f 'shell/variableTypes/elfVariableData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/elfVariableData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/elfVariableData.cpp'; fi`

katana-rawVariableData.o: shell/variableTypes/rawVariableData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-rawVariableData.o -MD -MP -MF $(DEPDIR)/katana-rawVariableData.Tpo -c -o katana-rawVariableData.o `test -f 'shell/variableTypes/rawVariableData.cpp' || echo '$(srcdir)/'`shell/variableTypes/rawVariableData.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-rawVariableData.Tpo $(DEPDIR)/katana-rawVariableData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/rawVariableData.cpp' object='katana-rawVariableData.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-rawVariableData.o `test -f 'shell/variableTypes/rawVariableData.cpp' || echo '$(srcdir)/'`shell/variableTypes/rawVariableData.cpp

katana-rawVariableData.obj: shell/variableTypes/rawVariableData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-rawVariableData.obj -MD -MP -MF $(DEPDIR)/katana-rawVariableData.Tpo -c -o katana-rawVariableData.obj `if test -f 'shell/variableTypes/rawVariableData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/rawVariableData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/rawVariableData.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-rawVariableData.Tpo $(DEPDIR)/katana-rawVariableData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/rawVariableData.cpp' object='katana-rawVariableData.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-rawVariableData.obj `if test -f 'shell/variableTypes/rawVariableData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/rawVariableData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/rawVariableData.cpp'; fi`

katana-arrayData.o: shell/variableTypes/arrayData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-arrayData.o -MD -MP -MF $(DEPDIR)/katana-arrayData.Tpo -c -o katana-arrayData.o `test -f 'shell/variableTypes/arrayData.cpp' || echo '$(srcdir)/'`shell/variableTypes/arrayData.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-arrayData.Tpo $(DEPDIR)/katana-arrayData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/arrayData.cpp' object='katana-arrayData.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-arrayData.o `test -f 'shell/variableTypes/arrayData.cpp' || echo '$(srcdir)/'`shell/variableTypes/arrayData.cpp

katana-arrayData.obj: shell/variableTypes/arrayData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-arrayData.obj -MD -MP -MF $(DEPDIR)/katana-arrayData.Tpo -c -o katana-arrayData.obj `if test -f 'shell/variableTypes/arrayData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/arrayData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/arrayData.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-arrayData.Tpo $(DEPDIR)/katana-arrayData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/arrayData.cpp' object='katana-arrayData.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-arrayData.obj `if test -f 'shell/variableTypes/arrayData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/arrayData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/arrayData.cpp'; fi`

katana-elfSectionData.o: shell/variableTypes/elfSectionData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-elfSectionData.o -MD -MP -MF $(DEPDIR)/katana-elfSectionData.Tpo -c -o katana-elfSectionData.o `test -f 'shell/variableTypes/elfSectionData.cpp' || echo '$(srcdir)/'`shell/variableTypes/elfSectionData.cpp
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-elfSectionData.Tpo $(DEPDIR)/katana-elfSectionData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/elfSectionData.cpp' object='katana-elfSectionData.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-elfSectionData.o `test -f 'shell/variableTypes/elfSectionData.cpp' || echo '$(srcdir)/'`shell/variableTypes/elfSectionData.cpp

katana-elfSectionData.obj: shell/variableTypes/elfSectionData.cpp
@am__fastdepCXX_TRUE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT katana-elfSectionData.obj -MD -MP -MF $(DEPDIR)/katana-elfSectionData.Tpo -c -o katana-elfSectionData.obj `if test -f 'shell/variableTypes/elfSectionData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/elfSectionData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/elfSectionData.cpp'; fi`
@am__fastdepCXX_TRUE@	$(am__mv) $(DEPDIR)/katana-elfSectionData.Tpo $(DEPDIR)/katana-elfSectionData.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='shell/variableTypes/elfSectionData.cpp' object='katana-elfSectionData.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(katana_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o katana-elfSectionData.obj `if test -f 'shell/variableTypes/elfSectionData.cpp'; then $(CYGPATH_W) 'shell/variableTypes/elfSectionData.cpp'; else $(CYGPATH_W) '$(srcdir)/shell/variableTypes/elfSectionData.cpp'; fi`

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) ctags-recursive \
	install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-recursive uninstall uninstall-am \
	uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
